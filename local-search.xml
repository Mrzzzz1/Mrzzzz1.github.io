<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mysql 基础2</title>
    <link href="/2023/03/22/mysql2/"/>
    <url>/2023/03/22/mysql2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>java 后端</category>
      
      <category>Mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql 基础(一)</title>
    <link href="/2023/03/21/mysql1/"/>
    <url>/2023/03/21/mysql1/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql-基础-一"><a href="#Mysql-基础-一" class="headerlink" title="Mysql 基础(一)"></a>Mysql 基础(一)</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>数据库 DataBase ( DB )：储存数据的仓库，数据有组织的进行存储</li><li>数据库管理系统 DataBase Management System ( DBMS ): 操纵和管理数据库的大型软件</li><li>Structured Query Language ( SQL ): 操作关系型数据库的编程语言，定义了一套操作关系型数据库的统一标准</li></ul><h2 id="Mysql-数据库"><a href="#Mysql-数据库" class="headerlink" title="Mysql 数据库"></a>Mysql 数据库</h2><ul><li><p>关系型数据库：建立在关系模型的基础上，由多张表相互连接的二维表组成的数据库</p></li><li><p>特点：</p><ul><li>使用表存储数据，格式统一，便于维护</li><li>使用 SQL 语言操作，标准统一，方便使用</li></ul></li><li><p>数据模型</p><p>客户端 连接 DBMS, 一个DBMS 可以创建多个数据库，每个数据库可以创建多张表</p></li></ul><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法"></a>通用语法</h3><ol><li>SQL 语句可以单行或多行书写，以分号结尾</li><li>SQL 语句可以使用空格或缩进来增加可读性</li><li>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写</li><li>注释<ul><li>单行注释： <code>--</code> 或 <code>#</code></li><li>多行注释 <code>/* 注释内容 */</code></li></ul></li></ol><h3 id="SQL-分类"><a href="#SQL-分类" class="headerlink" title="SQL 分类"></a>SQL 分类</h3><ul><li>DDL (Data Definition Language) 数据定义语言，用来定义数据库对象（数据库，表，字段）</li><li>DML(Data Manipulation Language) 数据操作语言，用来对数据库表中数据进行增删改</li><li>DQL(Data Query Language) 数据查询语言，用来查询数据库中表的记录</li><li>DCL(Data Control Language) 数据控制语言，用来创建数据库用户，控制数据库访问权限</li></ul><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><ul><li><p>查询所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure></li><li><p>查询当前数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATABASE();<br></code></pre></td></tr></table></figure></li><li><p>创建数据库 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] 数据库名 [<span class="hljs-keyword">DEFAULT</span> CHARSET 字符集][<span class="hljs-keyword">COLLATE</span> 排序规则];<br></code></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE [IF <span class="hljs-keyword">EXISTS</span>]数据库名;<br></code></pre></td></tr></table></figure></li><li><p>使用数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE 数据库名；<br></code></pre></td></tr></table></figure></li><li><p>查看数据库默认编码格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%char%&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>修改数据库默认编码格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> character_set_server<span class="hljs-operator">=</span>utf8;<br><span class="hljs-keyword">set</span> character_set_database<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure></li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><ul><li><p>查询当前数据库所有表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;<br></code></pre></td></tr></table></figure></li><li><p>查询表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> 表名;<br></code></pre></td></tr></table></figure></li><li><p>查询指定表的建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure></li></ul><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><ul><li><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>字段<span class="hljs-number">1</span> 字段<span class="hljs-number">1</span>类型[COMMENT 字段<span class="hljs-number">1</span>注释],<br>字段<span class="hljs-number">2</span> 字段<span class="hljs-number">2</span>类型[COMMENT 字段<span class="hljs-number">2</span>注释],<br>...<br>字段n 字段n类型[COMMENT 字段n注释]<br>)[COMMENT 表注释];<br></code></pre></td></tr></table></figure></li></ul><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><ul><li><p>向表中添加字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> 字段名 类型(长度) [COMMENT 注释][约束];<br></code></pre></td></tr></table></figure></li><li><p>修改表中字段</p><ul><li><p>修改数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> MODIFY 字段名 新字段类型(长度);<br></code></pre></td></tr></table></figure></li><li><p>修改字段名和数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释][约束];<br></code></pre></td></tr></table></figure></li></ul></li><li><p>删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> 字段名;<br></code></pre></td></tr></table></figure></li><li><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 RENAME <span class="hljs-keyword">TO</span> 新表名;<br></code></pre></td></tr></table></figure></li></ul><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><ul><li><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] 表名;<br></code></pre></td></tr></table></figure></li><li><p>删除指定表并重新创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">TUNRNCATE <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure></li></ul><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><table><thead><tr><th>类型</th><th>大小</th><th>有符号范围（SIGNED)</th><th>无符号范围(UNSIGNED)</th><th>描述</th></tr></thead><tbody><tr><td>TINYINT</td><td>1 byte</td><td>(-128, 127)</td><td>(0, 255)</td><td>小整数</td></tr><tr><td>SMALLINT</td><td>2 bytes</td><td>(-32768, 32767)</td><td>(0, 65535)</td><td>大整数</td></tr><tr><td>MEDIUMINT</td><td>3 bytes</td><td>(-8388608, 8388607)</td><td>(0, 16777215)</td><td>大整数</td></tr><tr><td>INT或INTEGER</td><td>4 bytes</td><td>(-2147483648, 2147483647)</td><td>(0,4294967295)</td><td>大整数</td></tr><tr><td>BIGINT</td><td>8 bytes</td><td>(-2^63, 2^63-1)</td><td>(0, 2^64 -1)</td><td>大整数</td></tr><tr><td>FLOAT</td><td>4 bytes</td><td></td><td></td><td>单精度浮点数</td></tr><tr><td>DOUBLE</td><td>8 bytes</td><td></td><td></td><td>双精度浮点数</td></tr><tr><td>DECIMAL</td><td>依赖于D和M</td><td>依赖于D和M</td><td></td><td>小数值（精确定点数）</td></tr></tbody></table><p>示例</p><ul><li><code>age TINYINT UNSIGNED;</code> 无符号小整数</li><li><code>score DOUBLE(4,1); </code> 4位数字，1位小数</li></ul><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255字节的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65535 bytes</td><td>二进制形式长文本数据</td></tr><tr><td>TEXT</td><td>0-65535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16777215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXTONGBLOB</td><td>0-16777215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONBLOB</td><td>0-4294967295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4294967295 bytes</td><td>极大文本数据</td></tr></tbody></table><p>示例</p><ul><li>CHAR(10) 十字节定长字符串，空白用空格代替</li><li>VARCHAR(10) 最长十字节变长字符串，根据实际动态选取长度</li></ul><h5 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h5><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01至 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至 838:59:59</td><td>HH:MM:SS</td><td>时间值或连续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期时间值</td></tr><tr><td>DATESTAMP</td><td>4</td><td>1000-01-01 00:00:00 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期时间值，时间戳</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>java 后端</category>
      
      <category>Mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Filter&amp;Listener&amp;AJAX&amp;JSON</title>
    <link href="/2023/03/19/Filter&amp;Listener/"/>
    <url>/2023/03/19/Filter&amp;Listener/</url>
    
    <content type="html"><![CDATA[<h1 id="Fliter"><a href="#Fliter" class="headerlink" title="Fliter"></a>Fliter</h1><ul><li>Filter: 过滤器，JavaWeb 三大组件（ Servlet , Fliter , Listener ) 之一。</li><li>Filter 可以拦截对资源的请求，从而实现一些特殊的功能。</li><li>Filter 一般完成一些通用的操作，如：权限控制，统一编码处理，敏感字符处理等。</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li><p>定义类，实现 Filter 接口，并重写其所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置 Filter 拦截资源的路径：在类上定义 WebFilter 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br></code></pre></td></tr></table></figure></li><li><p>在 doFilter 方法中处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    System.out.println(<span class="hljs-string">&quot;FilterDemo&quot;</span>);<br>  <span class="hljs-comment">//放行</span><br>    filterChain.doFilter(servletRequest,servletResponse);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="Filter-执行流程"><a href="#Filter-执行流程" class="headerlink" title="Filter 执行流程"></a>Filter 执行流程</h2><p>请求到达 Filter –&gt; 执行放行前逻辑 –&gt; 放行 –&gt; 访问资源 –&gt; 请求回到 Filter –&gt; 执行放行后逻辑</p><ul><li><p>放行前处理 request 数据，response 无数据</p></li><li><p>放行后，对 response 数据进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>  <span class="hljs-comment">//放行前</span><br>  System.out.println(<span class="hljs-string">&quot;放行前&quot;</span>);<br>  <span class="hljs-comment">//放行</span><br>  filterChain.doFilter(servletRequest,servletResponse);<br>  <span class="hljs-comment">//放行后</span><br>  System.out.println(<span class="hljs-string">&quot;放行后&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Filter-使用细节"><a href="#Filter-使用细节" class="headerlink" title="Filter 使用细节"></a>Filter 使用细节</h2><h3 id="Filter-拦截路径配置"><a href="#Filter-拦截路径配置" class="headerlink" title="Filter 拦截路径配置"></a>Filter 拦截路径配置</h3><ul><li>拦截具体资源：<code>/index.jsp</code> 只有访问 index.jsp 的请求会被拦截</li><li>目录拦截：<code>/user/*</code> 访问 &#x2F;user 下的所有资源，都会被拦截</li><li>后缀名拦截：<code>*.jsp </code> 访问后缀名为 .jsp 的请求会被拦截</li><li>拦截所有：<code>/*</code> ： 访问该 <code>web</code> 应用的所有资源都会被拦截</li></ul></li></ul><h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><ul><li>一个 Web 应用，可以配置多个过滤器，形成过滤器链</li><li>注解配置的 Filter , 优先级按照 Filter 类名字典序先后执行</li></ul><h1 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h1><ul><li><p>Listener 表示监听器，时 JavaWeb 三大组件( Servlet, Filter, Listener ) 之一</p></li><li><p>Listener 是在 application, session, request 三个对象创建，销毁，或者向其中添加修改删除属性时自动执行代码的功能组件</p></li><li><p>Listener 分类：JavaWeb 中提供了8个监听器</p></li></ul><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a><a href="https://www.w3school.com.cn/js/js_ajax_intro.asp">AJAX</a></h1><ul><li>AJAX(Asynchronous JavaScript And XML) : 异步的 JavaScript 和 XML</li></ul><h2 id="AJAX作用"><a href="#AJAX作用" class="headerlink" title="AJAX作用"></a>AJAX作用</h2><ol><li><p>与服务器进行数据交换： 通过 AJAX 可以给服务器发送请求，并获取服务器的响应数据</p><p>使用 HTML + AJAX 替换 JSP 页面，实现前后端分离</p></li><li><p>异步交互：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页，如：联想搜索，实时校验用户名是否可用等</p></li></ol><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li><p>编写 AjaxServlet, 并使用 response 输出字符串</p></li><li><p>创建 XMLHttpRequest 对象： 用于和服务器交换数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhttp;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>) &#123;<br>    xhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// code for IE6, IE5</span><br>     xhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>向服务器发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">xhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;ajax_info.txt&quot;</span>, <span class="hljs-literal">true</span>);<br>xhttp.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure></li><li><p>获取服务器响应数据 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">xhttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> =<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>;<br>       &#125;<br>    &#125;;<br></code></pre></td></tr></table></figure></li></ol><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a><a href="https://www.axios-http.cn/">Axios</a></h2><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul><li>JSON: JavaScript Object Notation JavaScript 对象表示法</li><li>语法简单，结构层次鲜明，多作为数据载体，在网络中进行数据传输</li></ul><h2 id="JSON-语法"><a href="#JSON-语法" class="headerlink" title="JSON 语法"></a>JSON 语法</h2><ul><li><p>定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = &#123;<br><span class="hljs-string">&quot;key1&quot;</span>: value1,<br><span class="hljs-string">&quot;key2&quot;</span>: value2,<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>value 的数据类型为： 数字，字符串，逻辑值(true,false)，数组（[1,2])，json对象({})</p></li><li><p>获取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">变量名.<span class="hljs-property">key</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="JSON-数据和-Java-对象互转"><a href="#JSON-数据和-Java-对象互转" class="headerlink" title="JSON 数据和 Java 对象互转"></a>JSON 数据和 Java 对象互转</h2><h3 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h3><ul><li>Fastjson 是阿里巴巴提供的一个 Java 语言编写的高性能功能完善的 JSON 库，是目前 Java 语言中最快的 JSON 库，可以实现 Java 对象和 JSON 字符串的相互转换</li></ul><h4 id="使用-Fasstjson"><a href="#使用-Fasstjson" class="headerlink" title="使用 Fasstjson"></a>使用 Fasstjson</h4><ul><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.62<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Java 对象转 JSON</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(obj)<br></code></pre></td></tr></table></figure></li><li><p>JSON 转成 Java 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> JSON.parseObject(jsonStr,User.class); <br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>java 后端</category>
      
      <category>java web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>会话跟踪</title>
    <link href="/2023/03/18/%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA/"/>
    <url>/2023/03/18/%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA/</url>
    
    <content type="html"><![CDATA[<h1 id="会话跟踪技术"><a href="#会话跟踪技术" class="headerlink" title="会话跟踪技术"></a>会话跟踪技术</h1><ul><li><p>会话：用户打开浏览器，访问 web 服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含<strong>多次请求和响应</strong></p></li><li><p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间<strong>共享数据</strong></p></li><li><p>HTTP 协议是<strong>无状态</strong>的，每次浏览器向服务器发起请求时，服务器都会将该请求视为新的请求，因此我们需要会话跟踪技术来实现会话内的<strong>数据共享</strong></p></li><li><p>实现方式</p><ul><li>客户端会话跟踪技术：<strong>Cookie</strong></li><li>服务端会话跟踪技术：<strong>Session</strong></li></ul></li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul><li>Cookie：客户端会话技术，将数据保存在客户端，以后每次请求都携带 Cookie 数据进行访问</li></ul><h3 id="Cookie-基本使用"><a href="#Cookie-基本使用" class="headerlink" title="Cookie 基本使用"></a>Cookie 基本使用</h3><h4 id="发送-Cookie"><a href="#发送-Cookie" class="headerlink" title="发送 Cookie"></a>发送 Cookie</h4><ol><li><p>创建 Cookie 对象，设置数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>发送 Cookie 到客户端：使用 response 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.addCookie(cookie);<br></code></pre></td></tr></table></figure></li></ol><h4 id="获取-Cookie"><a href="#获取-Cookie" class="headerlink" title="获取 Cookie"></a>获取 Cookie</h4><ol><li><p>获取客户端携带的所有 Cookie,使用 request 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = request.getCookies();<br></code></pre></td></tr></table></figure></li><li><p>遍历数组，获取每一个 Cookie 对象</p></li><li><p>使用 Cookie 对象方法获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">cookie.getName();<br>cookie.getValue();<br></code></pre></td></tr></table></figure></li></ol><h3 id="Cookie-原理"><a href="#Cookie-原理" class="headerlink" title="Cookie 原理"></a>Cookie 原理</h3><ul><li>Cookie 的实现是基于 HTTP 协议的<ul><li>响应头：set-cookie</li><li>请求头：cookie</li></ul></li></ul><h3 id="Cookie-使用细节"><a href="#Cookie-使用细节" class="headerlink" title="Cookie 使用细节"></a>Cookie 使用细节</h3><h4 id="Cookie-存活时间"><a href="#Cookie-存活时间" class="headerlink" title="Cookie 存活时间"></a>Cookie 存活时间</h4><ul><li>默认情况下， Cookie 存储在浏览器内存中，当浏览器关闭，内存释放，则 Cookie 被销毁</li><li><code>setMaxAge(int seconds)</code> : 设置 Cookie 存活时间<ol><li>正数：将 Cookie写入浏览器所在电脑的硬盘，持久化存储，到时间自动删除</li><li>负数：默认值，Cookie 在当前浏览器内存中，当浏览器关闭，则 Cookie 被销毁</li><li>零: 删除对应 Cookie</li></ol></li></ul><h4 id="Cookie-存储中文"><a href="#Cookie-存储中文" class="headerlink" title="Cookie 存储中文"></a>Cookie 存储中文</h4><ul><li><p>Cookie 不能直接存储中文</p></li><li><p>如需要存储，则需要进行转码：URL 编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//发送</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>name = URLEncoder.encode(name,<span class="hljs-string">&quot;utf-8&quot;</span>);<br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;name&quot;</span>,name);<br>response.addCookie(cookie);<br><br><span class="hljs-comment">////接收</span><br>Cookie[] cookies = request.getCookies();<br><span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>  <span class="hljs-keyword">if</span>(cookie.getName()==<span class="hljs-string">&quot;name&quot;</span>) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> cookie.getValue();<br>    value = URLDecoder.decode(value,<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    <span class="hljs-comment">//使用 cookie</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ul><li>Session : 服务端会话跟踪技术，将数据保存在服务端</li><li>JavaEE 提供 HttpSession 接口，来实现一次会话的多次请求间数据共享功能</li></ul><h3 id="Session-基本使用"><a href="#Session-基本使用" class="headerlink" title="Session 基本使用"></a>Session 基本使用</h3><ol><li><p>获取 Session 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br></code></pre></td></tr></table></figure></li><li><p>Session 对象方法</p><ul><li><code>void set Attribute(String name,Object o)</code> : 存储数据到 session 域中</li><li><code>Object getAttribute(String name)</code> : 根据 key, 获取值</li><li><code>void removeAttribute(String name) </code> : 根据 key, 删除该键值对</li></ul></li></ol><h3 id="Session-原理"><a href="#Session-原理" class="headerlink" title="Session 原理"></a>Session 原理</h3><ul><li>Session 是基于 Cookie 实现的，客户端和服务端间使用 Cookie 传递 Session 的 id ，从而使同一个客户端的多次请求使用同一个 Session</li></ul><h3 id="Session-使用细节"><a href="#Session-使用细节" class="headerlink" title="Session 使用细节"></a>Session 使用细节</h3><h4 id="Session-钝化-活化"><a href="#Session-钝化-活化" class="headerlink" title="Session 钝化 活化"></a>Session 钝化 活化</h4><ul><li>服务器正常重启不会导致 Session 数据丢失<ol><li>钝化：在服务器正常关闭后，Tomcat 会自动将 Session 数据写入磁盘文件中</li><li>活化：再次启动服务器后，从文件中加载数据到 Session 中</li></ol></li></ul><h4 id="Session-销毁"><a href="#Session-销毁" class="headerlink" title="Session 销毁"></a>Session 销毁</h4><ul><li><p>默认情况下,无操作30分钟后， Tomcat 自动销毁 session</p></li><li><p>可在 web.xml 中配置 session 自动销毁时间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>调用 session 对象的 invalidate() 方法销毁（在退出登录时销毁 session ）</p></li></ul><h2 id="Cookie-amp-Session"><a href="#Cookie-amp-Session" class="headerlink" title="Cookie &amp; Session"></a>Cookie &amp; Session</h2><ul><li>Cookie 和 Session 都是用来完成一次会话内多次请求间数据共享的方式</li><li>区别<ul><li>储存位置： Cookie 将数据储存在客户端， Session 将数据储存在服务端</li><li>安全性：Cookie 不安全，Session 安全</li><li>数据大小：Cookie 最大3kb, Session 无大小限制</li><li>储存时间： Cookie 可以长期储存，Session 默认30分钟</li><li>服务器性能： Cookie 不占用服务器资源， Session 占用服务器资源</li></ul></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>java 后端</category>
      
      <category>java web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JSP 基础</title>
    <link href="/2023/03/18/Jsp%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/03/18/Jsp%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><ul><li>JSP： Java Server Pages, Java 服务端页面</li><li>一种动态的网页技术，其中既可以定义 HTML , JS, CSS 等静态内容，还可以定义 Java 代码等动态内容</li><li>JSP &#x3D; HTML + Java</li><li>简化开发，避免在 Servlet 中直接输出 HTML 标签</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li><p>导入 JSP 坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 JSP 文件</p></li><li><p>编写 HTML 标签和 Java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span>  %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;Hello JSP!&lt;/h1&gt;<br>&lt;%<br>    System.out.println(<span class="hljs-string">&quot;Hello JSP&quot;</span>);<br>%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="JSP-原理"><a href="#JSP-原理" class="headerlink" title="JSP 原理"></a>JSP 原理</h2><ul><li><p>JSP 本质上是一个 Servlet</p></li><li><p>JSP 在被访问时，由 JSP 容器（Tomcat)将其转换为 Java 文件（Servlet) ,再由 JSP 容器（Tomcat) 将其编译，最终对外提供服务的是字节码文件</p></li></ul><h2 id="JSP-脚本"><a href="#JSP-脚本" class="headerlink" title="JSP 脚本"></a>JSP 脚本</h2><ul><li><p>JSP 脚本用于在 JSP 页面内定义 Java 代码</p></li><li><p>脚本分类</p><ol><li><code>&lt;%...%&gt;</code>: 内容会直接放到 <code>_jspService()</code> 方法中</li><li><code>&lt;%=...&gt;</code>: 内容会放到 <code>out.print()</code> 中，作为 <code>out.print()</code> 的参数</li><li><code>&lt;%!...%&gt;</code>: 内容会放到 <code>_jspService()</code> 方法之外，被类直接包含</li></ol></li></ul><h2 id="JSP-缺点"><a href="#JSP-缺点" class="headerlink" title="JSP 缺点"></a>JSP 缺点</h2><p>由于 JSP 页面内既可以定义 HTML 标签，又可以定义 Java 代码，造成了许多问题</p><ol><li>书写麻烦：特别是复杂的页面</li><li>可读性不高</li><li>复杂度高：运行需要依赖各种环境， JRE，JSP 容器， JavaEE…</li><li>占内存和磁盘： JSP 会自动生成 .java 和 .class 文件占磁盘，运行的 .class 文件占内存</li><li>调试困难： 出错后，需要找到自动生成的 .java 文件进行调试</li><li>不利于团队协作，前端人员不会 java, 后端人员 不精 HTML</li></ol><p>JSP 已经逐渐退出历史舞台…</p><p>Servlet -&gt; JSP -&gt; Servlet + JSP -&gt; Servlet + HTML + ajax</p><h2 id="EL-表达式"><a href="#EL-表达式" class="headerlink" title="EL 表达式"></a>EL 表达式</h2><ul><li><p>Expression Language 表达式语言，用于简化 JSP 页面内的 Java 代码</p></li><li><p>主要功能： 获取数据</p></li><li><p>语法： <code>$&#123;expression&#125;</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;brands&#125;<span class="hljs-comment">//获取域中存储的 key 为 brands 的数据</span><br></code></pre></td></tr></table></figure></li><li><p>使用：在 Servlet 中将数据添加到 request 域中并转发给 .jsp 文件，即可在文件中使用数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">request.setAttribute(<span class="hljs-string">&quot;status&quot;</span>,<span class="hljs-number">1</span>);<br>request.getRequestDispatcher(<span class="hljs-string">&quot;/jstl.jsp&quot;</span>).forward(request,response);<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;status&#125;<br></code></pre></td></tr></table></figure></li><li><p>若 JSP 不识别 EL 表达式，需在 JSP 文件开头加上<code>isELIgnored=&quot;false&quot;</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></li><li><p>若在 EL 表达式中使用类的成员，则自动调用对应的 get() 方法</p></li></ul><h3 id="域对象"><a href="#域对象" class="headerlink" title="域对象"></a>域对象</h3><ul><li>page: 当前页面有效</li><li>request: 当前请求有效</li><li>session: 当前会话有效</li><li>application: 当前应用有效</li></ul><p>EL 表达式获取数据，会依次从这4个域中寻找，直到找到为止</p><h2 id="JSTL-标签"><a href="#JSTL-标签" class="headerlink" title="JSTL 标签"></a>JSTL 标签</h2><ul><li>JSP 标准标签库（ Jsp Standarded Tag Library), 使用标签取代 JSP 页面上的 Java 代码</li></ul><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><ul><li><p>导入坐标</p></li><li><pre><code class="xml">&lt;dependency&gt;  &lt;groupId&gt;jstl&lt;/groupId&gt;  &lt;artifactId&gt;jstl&lt;/artifactId&gt;  &lt;version&gt;1.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;taglibs&lt;/groupId&gt;  &lt;artifactId&gt;standard&lt;/artifactId&gt;  &lt;version&gt;1.1.2&lt;/version&gt;&lt;/dependency&gt;<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><br>* 在 <span class="hljs-keyword">JSP </span>页面引入 <span class="hljs-keyword">JSTL </span>标签库<br><br>  ```<span class="hljs-keyword">jsp</span><br><span class="hljs-keyword"></span>  &lt;%@ taglib <span class="hljs-keyword">prefix=&quot;c&quot; </span>uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>使用 JSTL 标签</p><ol><li><p><code>&lt;c:if test=&quot;&quot;&gt; HTML &lt;/c:if&gt;</code> 对 test 的内容进行 if 判断，为 true 则执行中间的 HTML 语句</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;status == 1&#125;&quot;</span>&gt;<br>&lt;h1&gt;启用&lt;/h1&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p><code>&lt;c:forEach items = &quot;brands&quot; var =&quot;brand&quot;&gt;HTML&lt;/c:forEach&gt; </code> 遍历 items 数组，对每个成员执行 HTML 语句</p></li></ol></li></ul><h1 id="MVC-模式和三层架构"><a href="#MVC-模式和三层架构" class="headerlink" title="MVC 模式和三层架构"></a>MVC 模式和三层架构</h1><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><ul><li><p>MVC 是一种分层开发模式</p><ol><li>M：Model ，业务模型，处理业务，JavaBean</li><li>V：View ，视图，界面展示，JSP</li><li>C：Controller ，控制器，处理请求，调用模型和视图，Servlet</li></ol></li><li><p>MVC 优点：</p><ul><li>职责单一，互不影响</li><li>有利于分工协作</li><li>有利于组件重用</li></ul></li></ul><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><ul><li>表现层：接收请求，封装数据，调用业务逻辑层，响应数据</li><li>业务逻辑层：对业务逻辑进行封装，组合数据访问层层中的基本功能，形成复杂的业务逻辑功能</li><li>数据访问层（持久层）：对数据库进行 CRUD 基本操作</li></ul>]]></content>
    
    
    <categories>
      
      <category>java 后端</category>
      
      <category>java web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Request &amp; Response</title>
    <link href="/2023/03/16/Request/"/>
    <url>/2023/03/16/Request/</url>
    
    <content type="html"><![CDATA[<h1 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h1><ul><li>Request 获取请求数据</li></ul><h2 id="Request-继承体系"><a href="#Request-继承体系" class="headerlink" title="Request 继承体系"></a>Request 继承体系</h2><ul><li><p>Tomcat 需要解析浏览器请求， 封装为 request 对象，并且创建 request 对象传到 sevice 方法中</p></li><li><p>当我们的Servlet类实现的是Servlet接口的时候，service方法中的参数是ServletRequest和ServletResponse</p></li><li><p>当我们的Servlet类继承的是HttpServlet类的时候，doGet和doPost方法中的参数就变成HttpServletRequest和HttpServletReponse</p><p><img src="https://p.ipic.vip/43lrdz.png" alt="Request继承图"></p></li></ul><h2 id="Request-获取请求数据"><a href="#Request-获取请求数据" class="headerlink" title="Request 获取请求数据"></a>Request 获取请求数据</h2><ol><li><p>请求行 </p><p><img src="https://p.ipic.vip/qw1qdl.png" alt="请求行"></p><ul><li><code>String getMethod()</code> :  获取请求方式 <code>GET</code></li><li><code>String getContextPath()</code> : 获取虚拟目录（项目访问路径）<code>/request-demo</code></li><li><code>StringBuffer getRequestURL()</code> : 获取统一资源定位符 <code>http://localhost:8080/request-demo/req1 </code></li><li><code>String getRequestURI()</code> : 获取 URI (统一资源标识符) <code>request-demo/req1</code></li><li><code>String getQueryString()</code> : 获取请求参数（GET 方式）<code>username=zhangsan</code></li></ul></li><li><p>请求头</p><ul><li><code>String getHeader(name: String)</code> : 根据请求头名称获取值</li></ul></li><li><p>请求体 （POST)</p><ul><li><code>ServletInputStream getInputStream()</code> 获取请求体字节输入流</li><li><code>BufferedReader getReader()</code> : 获取请求体字符输入流</li></ul><p>获取的流不用手动关闭，随  request 对象销毁而自动关闭</p></li></ol><h3 id="统一获取请求参数"><a href="#统一获取请求参数" class="headerlink" title="统一获取请求参数"></a>统一获取请求参数</h3><p>由于 GET 方式的请求参数在请求头中， POST 方式的请求参数在请求体中，上述方法获取请求参数对应的方法不同，而使用 request 的以下方法可以统一获取请求参数</p><ul><li><p><code>Map&lt;String, String[]&gt; getParameterMap()</code> 获取所有参数 Map 集合</p></li><li><p><code>String[] getParameterValues(String var1)</code>  根据参数名称获取参数值（数组）</p></li><li><p><code>String getParameter(String var1)</code>  根据参数名称获取单个参数值</p></li></ul><h3 id="处理中文请求参数乱码"><a href="#处理中文请求参数乱码" class="headerlink" title="处理中文请求参数乱码"></a>处理中文请求参数乱码</h3><ul><li>由于浏览器 URL 编码使用 UTF-8 格式编码，而 tomcat7 以及之前的版本解码 URL 使用 ISO-8859-1 解码，在请求中含有中文字符时会出现乱码</li><li>tomcat8.0 及以后使用 UTF-8 格式解码，无需处理乱码</li></ul><h4 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h4><ol><li><p>URL 编码会将字符转换为可通过因特网传输的格式。</p></li><li><p>URL 只能使用 <a href="https://www.runoob.com/charsets/ref-html-ascii.html">ASCII 字符集</a>来通过因特网进行发送。</p></li><li><p>对于非 ASCII 字符，将字符按照编码格式转为二进制，在每个字节转成两个16进制数并在前面加<code>%</code></p></li></ol><p><img src="https://p.ipic.vip/a9gcip.png" alt="image-20230317133545142"></p><p><code>http://localhost/webDemo/?username=%E5%BC%A0%E4%B8%89</code></p><ol start="5"><li>URL 不能包含空格。URL 编码通常使用 + 来替换空格。</li></ol><h4 id="POST-处理乱码"><a href="#POST-处理乱码" class="headerlink" title="POST 处理乱码"></a>POST 处理乱码</h4><p>在获取参数前设置字符输入流编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="GET-处理乱码"><a href="#GET-处理乱码" class="headerlink" title="GET 处理乱码"></a>GET 处理乱码</h4><ul><li>由于 GET 方式获取请求不使用字符输入流，上述设置无法解决 GET 参数乱码问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//假设 s 为 编码的 URL %E5%BC%A0%E4%B8%89</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> URLEncoder.encode(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>);<br><span class="hljs-comment">// s1 为 tomcat 解码后的 URL å¼ ä¸</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> URLDecoder.decode(s, <span class="hljs-string">&quot;iso-8859-1&quot;</span>);<br><span class="hljs-comment">//方式1 先以 iso-8859-1 格式编码，再以 utf-8 格式解码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> URLEncoder.encode(s1, <span class="hljs-string">&quot;iso-8859-1&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> URLDecoder.decode(s2, <span class="hljs-string">&quot;utf-8&quot;</span>);<span class="hljs-comment">//张三</span><br><span class="hljs-comment">//方式2 先以 iso-8859-1 格式转为字节数组，再以 utf-8 格式转为字符串</span><br><span class="hljs-type">byte</span>[] bytes = s1.getBytes(<span class="hljs-string">&quot;iso-8859-1&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-string">&quot;utf-8&quot;</span>);<span class="hljs-comment">//张三</span><br></code></pre></td></tr></table></figure><h4 id="一句代码解决-（-GET-POST-均可使用）"><a href="#一句代码解决-（-GET-POST-均可使用）" class="headerlink" title="一句代码解决 （ GET POST 均可使用）"></a>一句代码解决 （ GET POST 均可使用）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<br>request.getParameter(<span class="hljs-string">&quot;username&quot;</span>).getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8<br>);<br></code></pre></td></tr></table></figure><h2 id="Request-请求转发"><a href="#Request-请求转发" class="headerlink" title="Request 请求转发"></a>Request 请求转发</h2><ul><li><p>请求转发：一种在服务器内部的资源跳转方式</p></li><li><p>实现方式</p><p>需求：用户请求资源A,资源A处理完将请求转发给资源B处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在资源A的doGet()中调用</span><br>request.getRequestDispatcher(<span class="hljs-string">&quot;资源B路径&quot;</span>).forward(request,response);<br></code></pre></td></tr></table></figure></li></ul><h4 id="转发时共享数据"><a href="#转发时共享数据" class="headerlink" title="转发时共享数据"></a>转发时共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// /RequestDemo1 的 doGet()</span><br>request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;helloB&quot;</span>);<br>request.getRequestDispatcher(<span class="hljs-string">&quot;/RequestDemo2&quot;</span>).forward(request,response);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// /RequestDemo2 的 doGet()</span><br>request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<span class="hljs-comment">//hello</span><br></code></pre></td></tr></table></figure><h1 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h1><ul><li><p>使用 Response 对象设置响应数据</p></li><li><p>Response 继承结构与 Request 类似</p><p><img src="https://p.ipic.vip/45jncw.png"></p></li></ul><h2 id="Response-设置响应数据"><a href="#Response-设置响应数据" class="headerlink" title="Response 设置响应数据"></a>Response 设置响应数据</h2><p>调用 response 相应方法设置响应数据</p><ol><li>响应行 <code>HTTP/1.1 200 OK</code><ul><li><code>void setStatus(int sc)</code> : 设置响应状态码</li></ul></li><li>响应头 <code>Content-Type:text/html</code><ul><li><code>void setHeader(String name, String value)</code> : 设置响应头键值对</li></ul></li><li>响应体<ul><li><code>printWriter()</code> : 获取字符输出流</li><li><code>ServletOutputStream getOutputStream()</code> : 获取字节输出流</li></ul></li></ol><h2 id="Response-完成重定向"><a href="#Response-完成重定向" class="headerlink" title="Response 完成重定向"></a>Response 完成重定向</h2><ul><li><p>重定向(Redirct)：一种资源跳转方式</p></li><li><p>使用场景：用户请求资源A,但资源A无法完成请求，资源A将请求重定向到资源B</p></li><li><p>服务器向浏览器发起重定向响应， 状态码为 302，浏览器访问响应响应头中 Location 对应 URL</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//重定向</span><br><span class="hljs-comment">//设置响应状态码 302</span><br>response.setStatus(<span class="hljs-number">302</span>);<br><span class="hljs-comment">//设置响应头 Location</span><br>response.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;/webDemo/ResponseDemo2&quot;</span>);<br><br><span class="hljs-comment">//简化写法</span><br>response.sendRedirect(<span class="hljs-string">&quot;/webDemo/ResponseDemo2&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>与请求转发不同，重定向资源路径需要加上虚拟目录</li></ul><h3 id="重定向与请求转发对比"><a href="#重定向与请求转发对比" class="headerlink" title="重定向与请求转发对比"></a>重定向与请求转发对比</h3><p>重定向特点</p><ul><li>浏览器地址栏发生变化</li><li>可以重定向到任意资源，既能重定向到服务器内部，也能重定向到服务器外部</li><li>两次请求，不能在多个资源使用 request 共享数据</li></ul><p>请求转发特点</p><ul><li>浏览器地址栏不发生变化</li><li>只能转发到当前服务器内部资源</li><li>一次请求，多个资源共享 request 数据</li></ul><h3 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h3><ul><li>明确路径给谁使用<ol><li>给浏览器使用：需要添加虚拟目录（项目访问路径）</li><li>给服务器使用： 不需要添加虚拟目录</li></ol></li><li>使用虚拟目录时使用 <code>request.getContextPath()</code> 动态获取目录</li></ul><h2 id="Response-响应字符数据"><a href="#Response-响应字符数据" class="headerlink" title="Response 响应字符数据"></a>Response 响应字符数据</h2><ol><li><p>获取字符输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br></code></pre></td></tr></table></figure></li><li><p>写数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">write.write(<span class="hljs-string">&quot;&lt;h1&gt;aaa&lt;/h1&gt;&quot;</span>);<span class="hljs-comment">//浏览器当作纯文本输出</span><br></code></pre></td></tr></table></figure></li><li><p>若需浏览器解析为 HTML ,需设置头信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setHeader(<span class="hljs-string">&quot;content-type&quot;</span>,<span class="hljs-string">&quot;text/html&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><ul><li><p>write 流不需要手动关闭，随 response 销毁自动关闭</p></li><li><p>输出中文数据需要设置流的编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置响应头的同时设置输出流的字符集</span><br>response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h2 id="Response-响应字节数据"><a href="#Response-响应字节数据" class="headerlink" title="Response 响应字节数据"></a>Response 响应字节数据</h2><ol><li><p>获得字节输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br></code></pre></td></tr></table></figure></li><li><p>读取文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.jpg&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>拷贝字节流</p><ul><li>直接拷贝</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((length = fis.read(buf))!=-<span class="hljs-number">1</span>) &#123;<br>    outputStream.write(buf);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>使用工具类</p><p>在 <code>pom.xml</code> 中导入 commons-io</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>调用 copy 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">IOUtils.copy(fis,outputStream);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>关闭文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">fis.close()<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>java 后端</category>
      
      <category>java web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自己看的一些配置博客</title>
    <link href="/2023/03/16/%E8%87%AA%E5%B7%B1%E7%9C%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/03/16/%E8%87%AA%E5%B7%B1%E7%9C%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="自己看的一些配置博客"><a href="#自己看的一些配置博客" class="headerlink" title="自己看的一些配置博客"></a>自己看的一些配置博客</h1><p>（为了防止很久以后忘记怎么配的</p><ul><li><p><a href="https://cnhuazhu.top/next/2021/10/12/%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88Ubuntu%EF%BC%89/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88Ubuntu-20-04%EF%BC%89/">将 Hexo 部署到云服务器</a></p></li><li><p><a href="https://www.volcengine.com/docs/6638/141485">为 nginx 服务器配置 ssl 证书</a></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Servlet</title>
    <link href="/2023/03/15/servlet/"/>
    <url>/2023/03/15/servlet/</url>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><ul><li>Servlet 是 java 提供的一门<strong>动态</strong> web 资源开发技术</li><li>Servlet 是 JavaEE 规范之一，其实就是一个接口，将来我们需要定义 Servlet 类实现 Servlet 接口，并为 web 服务器运行 Servlet</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li><p>创建 Maven web 项目，导入 Tomcat 和 Servlet 依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--由于Tomcat 自带 servlet jar 包，依赖只需在测试和编译生效，避免冲突--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>webDemo<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--TOMCAT 插件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建：定义一个类，实现 Servlet 接口，重写接口中的所有方法，并在 service 方法中输入一句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">()</span>&#123;&#125;<br>  System.out.println(<span class="hljs-string">&quot;service...&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置：在类上使用 WebServlet 注解，配置该 Servlet 的访问路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>访问：启动 Tomcat, 浏览器输入 URL 访问该 Servlet</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/web-demo/</span>demo1<br></code></pre></td></tr></table></figure></li></ol><h2 id="Servlet-执行流程"><a href="#Servlet-执行流程" class="headerlink" title="Servlet 执行流程"></a>Servlet 执行流程</h2><ul><li><p>Servlet 由 Web 服务器创建， Servlet 方法由 Web 服务器调用</p></li><li><p>服务器调用 Servlet 中的 service 方法 选择要显示的内容</p></li></ul><h2 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h2><ul><li><p>对象的生命周期指一个对象从被创建到被销毁的整个过程</p></li><li><p>Servlet 运行在 Servlet 容器（ Web 服务器）中，其生命周期由容器管理，分为四个阶段</p><ol><li><p>加载和实例化：默认情况下，当 Servlet 第一次被访问时，由容器创建 Servlet 对象，也可通过<code>@WebServlet</code> 的 <code>loadOnStartup</code> 属性配置，该属性默认为 -1 ，当该属性赋值为 0 或 正整数时，Servlet 对象会在服务器启动时创建，值大于 0 时，值越小，优先级越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/demo1&quot;, loadOnStartup = 1)</span><br></code></pre></td></tr></table></figure></li><li><p>初始化：在 Servlet 实例化之后，容器调用 Servlet 的 init() 方法初始化这个对象，完成一些如加载配置文件，创建连接等初始化的工作，该方法只调用一次</p></li><li><p>请求处理：每次请求 Servlet 时， Servlet 容器都会调用 Servlet 的 service() 方法对请求进行处理</p></li><li><p>服务终止： 当需要释放内存或者容器关闭时，容器就会调用 Servlet 示例的 destory() 方法完成资源的释放，在 destory() 方法调用之后，容器会释放这个 Servlet 实例，该实例随后会被 Java 的垃圾收集器回收</p></li></ol></li></ul><h2 id="Servlet-体系结构"><a href="#Servlet-体系结构" class="headerlink" title="Servlet 体系结构"></a>Servlet 体系结构</h2><p><img src="https://p.ipic.vip/6gl2vk.png"></p><p>开发 B&#x2F;S 架构的 Web 项目，均针对 HTTP 协议，自定义 Servlet 继承 HttpServlet </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><span class="hljs-comment">//收到 get 请求时调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;get...&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//收到 post 请求时调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;post...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HTTPServlet 大致原理: 在 service() 中根据不同的请求方式调用不同的 doxxx() 方法。</p><h2 id="Servlet-urlPattern-配置"><a href="#Servlet-urlPattern-配置" class="headerlink" title="Servlet urlPattern 配置"></a>Servlet urlPattern 配置</h2><ul><li><p>配置访问 Servlet 的访问路径（urlPattern)</p></li><li><p>一个 Servlet 可以配置多个 urlPattern</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &#123;&quot;/demo1&quot;,&quot;/demo2&quot;&#125;)</span><br></code></pre></td></tr></table></figure></li><li><p>urlPattern 配置规则</p><ol><li><p>精确匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置路径</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/user/select&quot;)</span><br><span class="hljs-comment">//访问路径</span><br>localhost:<span class="hljs-number">8080</span>/user/select<br></code></pre></td></tr></table></figure></li><li><p>目录匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置目录</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/user/*&quot;)</span><br><span class="hljs-comment">//访问路径</span><br>localhost:<span class="hljs-number">8080</span>/user/aaa<br>localhost:<span class="hljs-number">8080</span>/user/bbb<br></code></pre></td></tr></table></figure></li><li><p>扩展名匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置目录</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;*.do&quot;)</span><span class="hljs-comment">//不以 / 开头</span><br><span class="hljs-comment">//访问路径</span><br>localhost:<span class="hljs-number">8080</span>/aaa.<span class="hljs-keyword">do</span><br>localhost:<span class="hljs-number">8080</span>/bbb.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure></li><li><p>任意匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置目录</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/&quot;)</span><br><span class="hljs-comment">//访问路径</span><br>localhost:<span class="hljs-number">8080</span>/任意路径<br></code></pre></td></tr></table></figure></li></ol></li><li><p>优先级：精确匹配 &gt; 目录匹配 &gt; 扩展名路径 &gt; <code> /*</code> &gt; <code> /</code></p></li></ul><h2 id="xml-配置-Servlet"><a href="#xml-配置-Servlet" class="headerlink" title="xml 配置 Servlet"></a>xml 配置 Servlet</h2><p>xml 可代替注解</p><p>在 web.xml 中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 名字任意取 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- class 完全类名 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zjt.web.ServletDemo1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 上图所取名字 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 访问路径 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/demo1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java 后端</category>
      
      <category>java web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Http 略解</title>
    <link href="/2023/03/13/http%E7%95%A5%E8%A7%A3/"/>
    <url>/2023/03/13/http%E7%95%A5%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><ul><li>HyperText Tranfer Protocol, 超文本传输协议，规定了浏览器和服务器之间数据传输的规则</li></ul><h2 id="HTTP-协议特点"><a href="#HTTP-协议特点" class="headerlink" title="HTTP 协议特点"></a>HTTP 协议特点</h2><ul><li>基于 TCP 协议， 面向连接，安全</li><li>基于请求-响应模型，一次请求对应一次响应</li><li>HTTP协议是无状态的协议：对于事务处理没有记忆能力，每次请求-响应都是独立的<ul><li>缺点： 多次请求不能共享数据；Java 中使用会话技术（Cookie, Session) 来解决这个问题</li><li>优点：速度快</li></ul></li></ul><h2 id="请求数据格式"><a href="#请求数据格式" class="headerlink" title="请求数据格式"></a>请求数据格式</h2><ul><li>请求行：请求数据的第一行。其中 GET 表示请求方式， &#x2F; 表示请求资源路径， HTTP&#x2F;1.1表示协议版本</li><li>请求头：第二行开始，格式为 key: value 形式</li><li>请求体：POST 请求的最后一部分，存放请求参数</li></ul><p><img src="https://p.ipic.vip/q8ak73.png" alt="GET 请求示例"></p><p><img src="https://p.ipic.vip/bx7ink.png" alt="POST 请求示例"></p><ul><li>GET 请求和 POST 请求的区别：<ol><li>GET 请求请求参数在请求行中，没有请求体，POST 请求的请求参数在请求体中</li><li>GET 请求有请求参数大小限制，POST 没有</li></ol></li></ul><h3 id="常见的-HTTP-请求头"><a href="#常见的-HTTP-请求头" class="headerlink" title="常见的 HTTP 请求头"></a>常见的 HTTP 请求头</h3><ul><li><p>Host: 表示请求的主机名</p></li><li><p>User-Agent: 浏览器版本，例如 Chrome 浏览器的标识类似 Mozilla&#x2F;5.0 …</p><p>Chrome&#x2F;79</p></li><li><p>Accept: 表示浏览器能接收的资源类型，如 <code> text/*, image/*</code> 或者 <code>*/*</code> 表示所有</p></li><li><p>Accept-Language: 表示浏览器偏好的语言，服务器可以据此返回不同语言的网页</p></li><li><p>Accept-Encoding: 表示浏览器可以支持的压缩类型，例如 gzip, deflate 等</p></li></ul><h2 id="响应数据格式"><a href="#响应数据格式" class="headerlink" title="响应数据格式"></a>响应数据格式</h2><p><img src="https://p.ipic.vip/gfamzd.png" alt="HTTP 响应数据示例"></p><ul><li><p>响应行：响应数据的第一行，其中 HTTP&#x2F;1.1 表示协议版本，200表示响应状态码，OK表示状态码描述</p></li><li><p>响应头：第二行开始，格式为 key: value 形式</p></li><li><p>响应体：最后一部分，存放响应数据</p></li></ul><h3 id="常见的-HTTP-响应头："><a href="#常见的-HTTP-响应头：" class="headerlink" title="常见的 HTTP 响应头："></a>常见的 HTTP 响应头：</h3><ul><li>Content-Type: 表示该响应内容的类型，例如 text&#x2F;html, image&#x2F;jpeg</li><li>Content-Length: 表示该响应内容的长度（字节数）</li><li>Content-Encoding: 表示该响应的压缩算法，例如 gzip</li><li>Cache-Control: 指示客户端应如何缓存，例如 max-age &#x3D; 300 表示最多缓存300秒</li></ul><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong> – 临时状态码，表示请求已接受，告诉客户端继续请求或者如果请求已经完成则忽略它</td></tr><tr><td>2xx</td><td><strong>成功</strong> – 表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong> – 重定向到其他地方，它让客户端再发起一个请求以完成整个处理</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong> – 处理发生错误，责任在客户端，如：客户端请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong> – 处理发生错误，责任在服务器，如：服务器抛出异常，路由错误，HTTP 版本不支持等</td></tr></tbody></table><h2 id="常见的响应状态码"><a href="#常见的响应状态码" class="headerlink" title="常见的响应状态码"></a>常见的响应状态码</h2><table><thead><tr><th>状态码</th><th>英文描述</th><th align="left">解释</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td align="left">客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td>Found</td><td align="left">指示所请求的资源已移动到由 Location 响应头给定的 URL ,浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td>Not Modified</td><td align="left">告诉客户端，请求的资源自上次取得后，服务端并未更改，直接使用本地缓存；隐式重定向</td></tr><tr><td>400</td><td>Bad Request</td><td align="left">客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td>Forbidden</td><td align="left">服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td>404</td><td>Not Found</td><td align="left"><strong>请求资源不存在</strong> ，一般是 URL 输入有误，或者网站资源被删除了</td></tr><tr><td>428</td><td>Precondition Required</td><td align="left">服务器要求有条件的请求，告诉客户端想要访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td>Too Many Requests</td><td align="left"><strong>太多请求</strong> ，可以限制客户端请求某个资源的数量，配合 Retry-After (多长时间后可以请求)响应头一起使用</td></tr><tr><td>431</td><td>Request Header Fields Too Large</td><td align="left"><strong>请求头太大</strong> ，服务器不愿意处理请求，因为它的头部字段太大，请求可以在减少请求头大小后重新提交</td></tr><tr><td>405</td><td>Method Not Allowed</td><td align="left">请求方式有误，比如应该使用 GET 请求方式的资源，用了 POST</td></tr><tr><td>500</td><td>Internal Server Error</td><td align="left"><strong>服务器发生不可预期的错误</strong> ，服务器出现异常</td></tr><tr><td>503</td><td>Service Unavailable</td><td align="left"><strong>服务器尚未准备好处理请求</strong> ，服务器刚刚启动，还未初始化好</td></tr><tr><td>511</td><td>Network Authentication Required</td><td align="left">客户端需要进行身份验证才能获得网络访问的权限</td></tr></tbody></table><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a></p>]]></content>
    
    
    <categories>
      
      <category>java 后端</category>
      
      <category>java web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 基础</title>
    <link href="/2023/03/13/js%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/03/13/js%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="JS-基础"><a href="#JS-基础" class="headerlink" title="JS 基础"></a>JS 基础</h1><h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><ul><li>面向对象，跨平台</li><li>用于控制网页的行为，可以与网页交互</li><li>与 java 完全不同，但语法相似</li></ul><h2 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h2><h3 id="内部脚本"><a href="#内部脚本" class="headerlink" title="内部脚本"></a>内部脚本</h3><ul><li><p>直接在 HTML 文件内部通过 <code>&lt;script&gt;</code> 标签引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>位置可任意，一般放于 body 底部</p></li></ul><h3 id="外部脚本"><a href="#外部脚本" class="headerlink" title="外部脚本"></a>外部脚本</h3><ul><li>定义于外部 .js 文件中</li><li>在 HTML 中使用 <code>&lt;script&gt;</code> 标签引入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/demo.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h3><ul><li>区分大小写</li><li>语句结尾分号可省略</li><li>大括号代表代码块</li></ul><h3 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h3><ul><li><p>使用 <code>window.alert()</code> 弹出警告框</p></li><li><p>使用<code>document.write()</code> 写入 HTML</p></li><li><p>使用 <code>console.log()</code> 写入浏览器控制台</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js~&quot;</span>);<span class="hljs-comment">//写入警告框</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;hello js 2~&quot;</span>);<span class="hljs-comment">//写入html页面</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello js 3&quot;</span>);<span class="hljs-comment">//写入浏览器的控制台</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>变量名由字母，<code>_</code>，数字，<code>$</code> 组成，不能以数字开头，建议使用驼峰命名</p></li><li><p>Js 为弱类型语言，变量可存放不同类型的值</p></li><li><p>使用 <code>var</code> 定义变量，<code>var</code> 定义变量全局有效，可重复定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span><span class="hljs-comment">//正确</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(age)<span class="hljs-comment">//20</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>ECMAScript6 新增 <code>let</code> 关键字，<code>let</code> 定义变量只带代码块中有效，不可重复定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> age = <span class="hljs-number">20</span><span class="hljs-comment">//错误，不可重复定义</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(age)<span class="hljs-comment">//无法访问</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>const</code> 声明常量，声明后值不可改变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> pi = <span class="hljs-number">3.14</span></span><br><span class="language-javascript">  pi = <span class="hljs-number">3</span><span class="hljs-comment">//错误</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h4><ul><li>number：数字（整数，小数，NaN(Not a Number)</li><li>string: 字符和字符串，使用单引号和双引号均可</li><li>boolean：布尔型， true false</li><li>null: 对象为空</li><li>undefined：当声明变量未赋初值，该变量默认值为 undefined</li><li>使用 typeof 获取数据类型</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">     number</span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> price = <span class="hljs-number">99.8</span>;</span><br><span class="language-javascript">     <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> age);</span><br><span class="language-javascript">     <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> price);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    string</span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> ch = <span class="hljs-string">&#x27;a&#x27;</span>;</span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;张三&#x27;</span>;</span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> addr = <span class="hljs-string">&quot;北京&quot;</span>;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">     <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> ch);</span><br><span class="language-javascript">     <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> name);</span><br><span class="language-javascript">     <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> addr);</span><br><span class="language-javascript">    </span><br><span class="language-javascript">     <span class="hljs-comment">//boolean</span></span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> flag2 = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">     <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> flag);</span><br><span class="language-javascript">     <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> flag2);</span><br><span class="language-javascript">    </span><br><span class="language-javascript">     <span class="hljs-comment">//null</span></span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> obj = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">     <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> obj);<span class="hljs-comment">//Object</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">     <span class="hljs-comment">//undefined</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> a ;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> a);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>与 java 相似</li><li>&#x3D;&#x3D; <ol><li>判断类型是否相同，不相同进行类型转换</li><li>比较转换后的值是否相同</li></ol></li><li>&#x3D;&#x3D;&#x3D; <ol><li>判断类型是否相同，不相同返回 false</li><li>类型相同比较值</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> age1 = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> age2 = <span class="hljs-string">&quot;20&quot;</span>;</span><br><span class="language-javascript">  age1 == age2;<span class="hljs-comment">//true</span></span><br><span class="language-javascript">  age1 === age2;<span class="hljs-comment">//false</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul><li>其他类型转为 number <ul><li>string：按照字符串的字面值转为数字，若部位数字则转为 NaN</li><li>boolean: true 转为1，false 转为0</li></ul></li><li>其他类型转为 boolean<ul><li>number: 0和 NaN 转为 false, 其他转为1</li><li>string: 空字符串转为 false, 其他转为 true</li><li>null&amp;undifined: 转为 false</li></ul></li></ul><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><ul><li>与 java 相同</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>定义：通过 function 关键字定义函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">functionName</span>(<span class="hljs-params">参数<span class="hljs-number">1</span>，参数<span class="hljs-number">2.</span>..</span>)&#123;<br><span class="hljs-comment">//要执行的代码</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>形式参数不用写类型，不用写返回值类型</p></li><li><p>传参个数大于形参个数也可正常调用，多余的参数被丢弃</p></li><li><p>传参数量少于形参个数也可正常调用，剩余参数用默认值代替（number 默认为 NaN)</p></li></ul><h2 id="JS-对象"><a href="#JS-对象" class="headerlink" title="JS 对象"></a>JS 对象</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a><a href="https://www.w3school.com.cn/js/js_array_methods.asp">Array</a></h3><ul><li><p>定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//方式1</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<span class="hljs-comment">//方式2</span><br></code></pre></td></tr></table></figure></li><li><p>访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">arr[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>相当于 java 中的集合，变长变类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-comment">//变长</span><br>arr[<span class="hljs-number">10</span>] = <span class="hljs-number">10</span>;<span class="hljs-comment">//可访问</span><br>arr[<span class="hljs-number">10</span>]<span class="hljs-comment">//10</span><br>arr[<span class="hljs-number">9</span>]<span class="hljs-comment">//undefined</span><br><span class="hljs-comment">//变类型</span><br>arr[<span class="hljs-number">5</span>]=<span class="hljs-string">&quot;hello&quot;</span><br>arr[<span class="hljs-number">5</span>];<span class="hljs-comment">//&quot;hello&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.<span class="hljs-property">length</span>;<span class="hljs-comment">//数组长度</span><br></code></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//将元素添加到数组末尾</span><br><span class="hljs-comment">//arr.splice(起始位置，删除元素个数);</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//删除第0个元素</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a><a href="https://www.w3school.com.cn/js/js_string_methods.asp">String</a></h3><ul><li><p>定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Strint</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-keyword">var</span> str2 = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-keyword">var</span> str3 = <span class="hljs-string">&#x27;abc&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">str1.<span class="hljs-property">length</span> <br></code></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//第0个字符</span><br>str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">//&#x27;a&#x27;的下标</span><br>str.<span class="hljs-title function_">trim</span>();去除字符串两端空白字符<br></code></pre></td></tr></table></figure></li></ul><h3 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h3><ul><li><p>格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 对象名称 = &#123;<br>属性名称: 属性值<span class="hljs-number">1</span>,<br>属性名称: 属性值<span class="hljs-number">2</span>,<br>...<br>函数名称: <span class="hljs-keyword">function</span>(<span class="hljs-params">形参列表</span>)&#123;&#125;<br>...<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zhangsan&quot;</span>,<br>age = <span class="hljs-number">23</span>,<br><span class="hljs-attr">eat</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;干饭～&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-title function_">alert</span>(person.<span class="hljs-property">name</span>);<br><span class="hljs-title function_">alert</span>(person.<span class="hljs-property">age</span>);<br>person.<span class="hljs-title function_">eat</span>();<br></code></pre></td></tr></table></figure></li></ul><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a><a href="https://www.w3school.com.cn/js/js_examples.asp">BOM</a></h2><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><ul><li><p>浏览器窗口对象</p></li><li><p>获取： 直接使用 <code>window</code> ,其中 <code>window.</code> 可以省略</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>属性： 获取其他 BOM 对象 history, navigator, screen, location</p></li><li><p>方法 </p><ul><li>alert() 显示带有一段消息和一个确认按钮的警告框</li><li>confirm() 显示带有一段消息以及确认按钮和取消按钮的对话框</li><li>setInterval() 按照指定的周期（以毫秒计）来调用函数或计算表达式。</li><li>setTimeout() 在指定的毫秒数后调用函数或计算表达式，只执行一次。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//alert</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-comment">//confirm</span><br><span class="hljs-keyword">var</span> flag = <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;确认删除吗&quot;</span>)；<span class="hljs-comment">//点击确定返回 true, 点击取消返回 false；</span><br><span class="hljs-comment">//setTimeout</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;, <span class="hljs-number">3000</span>)<span class="hljs-comment">//三秒后弹出 &quot;hello&quot; 窗口</span><br><span class="hljs-comment">//setInterval</span><br><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;, <span class="hljs-number">3000</span>)<span class="hljs-comment">//每隔三秒弹出 &quot;hello&quot; 窗口</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><ul><li><p>History: 历史记录</p></li><li><p>获取： 使用 <code>window.history</code> 获取，其中<code>window.</code>可以省略</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>);<br>history.<span class="hljs-title function_">fuction</span>();<br></code></pre></td></tr></table></figure></li><li><p>方法</p><ul><li>back() 加载 history 列表中的前一个 URL </li><li>forward() 加载 history 列表中的下一个 URL</li></ul></li></ul><h3 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h3><ul><li><p>Location: 地址栏对象</p></li><li><p>获取： 使用 <code>window.location</code> 获取，其中 <code>window.</code> 可以省略</p></li><li><p>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">href <span class="hljs-comment">//设置或返回完整的 URL</span><br>loaction.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span>;<span class="hljs-comment">//跳转到百度</span><br><span class="hljs-keyword">var</span> href = location.<span class="hljs-property">href</span>;<span class="hljs-comment">//获取当前地址</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a><a href="https://www.w3school.com.cn/js/js_htmldom.asp">DOM</a></h2><ul><li><p>Document Object Model 文档对象模型</p></li><li><p>将标记语言的各个组成部分封装成对象</p><ul><li>Document: 整个文档对象</li><li>Element: 元素对象</li><li>Attribute: 属性对象</li><li>Text： 文本对象</li><li>Comment：注释对象</li></ul><p><img src="https://p.ipic.vip/lp4rhh.png" alt="DOM 树"></p></li><li><p>js 通过 DOM 对 HTML 进行操作</p><ul><li>改变 HTML 元素的内容</li><li>改变 HTML 元素的样式（CSS）</li><li>对 HTML DOM 事件作出反应</li><li>添加和删除 HTML 元素</li></ul></li></ul><h3 id="获取-Element"><a href="#获取-Element" class="headerlink" title="获取 Element"></a>获取 Element</h3><ul><li><p>Element：元素对象（标签）</p></li><li><p>获取：使用 Document 对象的方法获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>();<span class="hljs-comment">//根据 id 属性值获取，放返回一个 Element 对象</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>();<span class="hljs-comment">//根据标签名称获取，返回 Element 对象数组</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>();<span class="hljs-comment">//根据 name 属性值获取， 返回 Element 对象数组</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>();<span class="hljs-comment">//根据 class 属性值获取，返回 Element 对象数组</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="使用-Element"><a href="#使用-Element" class="headerlink" title="使用 Element"></a>使用 Element</h3><ul><li><p>通过 style 设置标签样式</p></li><li><p>通过 innerHTML 设置文本内容</p></li><li><p><code>&lt;img&gt;</code> 标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;light&quot;</span>);获取图像<br>img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;1.png&quot;</span>;<span class="hljs-comment">//改变图像内容</span><br></code></pre></td></tr></table></figure></li><li><p>具体使用查看文档</p></li></ul><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><ul><li>事件：HTML 事件是发生在元素上的”事情“，例如<ul><li>按钮被点击</li><li>鼠标移动到元素之上</li><li>按下键盘按键</li></ul></li><li>事件监听： javascript 可以在事件被侦测到时执行代码</li></ul><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul><li><p>方式一：通过 HTML 标签中的事件属性进行绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;button&quot;</span> onclick=<span class="hljs-string">&#x27;on()&#x27;</span>&gt;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;按钮被点击&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式二：通过 DOM 元素绑定(推荐)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;button&quot;</span> id=<span class="hljs-string">&quot;btn&quot;</span>&gt;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;按钮被点击&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a><a href="https://www.w3school.com.cn/js/js_htmldom_events.asp">常见事件</a></h3><ul><li>unblur: 元素失去焦点</li><li>unfocus: 元素获得焦点</li><li>onchange: 文本内容改变</li><li>onclick: 按钮被点击</li><li>onmouseover: 鼠标移到某元素上</li><li>onmouseup: 鼠标按键被松开</li><li>onsubmit: 表单中的确认按钮被点击</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li>概念： 正则表达式定义了字符串组成的规则</li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol><li><p>直接量：注意不要加引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\w&#123;6,12&#125;$/</span>;<br></code></pre></td></tr></table></figure></li><li><p>创建 RegExp 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;^\w&#123;6,12&#125;$&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><code>test(str)</code> :判断指定字符串是否符合规则，返回 true 或 false</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><code>^</code> ：表示开始</li><li><code>$ </code> ：表示结束</li><li><code>[] </code> ：代表每个范围内的单个字符，比如[0-9]单个数字字符</li><li><code>. </code> :代表任意单个字符，除了换行符和行结束符</li><li><code>\w </code> : 代表单词字符：字母，数字，下划线，相当于[A-Za-Z0-9]</li><li><code>\d</code> ：代表数字字符，相当于[0-9]</li><li><code>+</code> ：至少一个</li><li><code>*</code> ：零个或多个</li><li><code>?</code> ：零个或一个</li><li><code>&#123;x&#125;</code> ：x 个</li><li><code>&#123;m,&#125;</code> ：至少m个</li><li><code>&#123;m,n&#125;</code> ：至少 m 个，最多 n 个</li></ul>]]></content>
    
    
    <categories>
      
      <category>java 后端</category>
      
      <category>java web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML 略解</title>
    <link href="/2023/03/09/HTML/"/>
    <url>/2023/03/09/HTML/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML-amp-CSS-略解"><a href="#HTML-amp-CSS-略解" class="headerlink" title="HTML&amp;CSS 略解"></a>HTML&amp;CSS 略解</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><ul><li><p>HTML 是一门语言，所有的网页都是由 HTML 这门语言编写的</p></li><li><p>HTML ( HyperText Markup Language ): 超文本标记语言</p><ul><li>超文本： 超越了文本限制，比普通文本更强大，除了文字信息还可定义图片，音频，视频等内容</li><li>标记语言：由标签构成的语言</li></ul></li><li><p>HTML 运行在浏览器上，HTML 标签由浏览器来解析</p></li><li><p>W3C 标准：网页主要由三部分构成</p><ul><li><p>结构：HTML</p></li><li><p>表现：CSS</p></li><li><p>行为：JavaScript</p></li></ul></li></ul><h3 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h3><p>html 标签不区分大小写，语法松散，小的语法错误不影响显示。</p><ul><li>html 根标签，用于浏览器识别 HTML 文档</li><li>head 头标签，定义关于文档的信息</li><li>body 标签，网页主体内容展示</li><li>title 标签, 网页标题（浏览器标签栏显示）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br>            html 快速入门<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        乾坤未定，你我皆是黑马！<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>font 标签 设置文字颜色</li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span> = <span class="hljs-string">&quot;red&quot;</span>&gt;</span> 乾坤未定，你我皆是黑马！<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>h1-h6 标签,定义标题，h1 最大，h6 最小</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">标签</th><th>描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;b&gt;</code></td><td>文本加粗</td></tr><tr><td align="left"><code>&lt;i&gt;</code></td><td>文本斜体</td></tr><tr><td align="left"><code>&lt;u&gt;</code></td><td>文本下划线</td></tr><tr><td align="left"><code>&lt;center&gt;</code></td><td>文本居中（已弃用）</td></tr><tr><td align="left"><code>&lt;p&gt;</code></td><td>定义段落</td></tr><tr><td align="left"><code>&lt;br&gt;</code></td><td>定义折行( html 不识别换行符，需手动添加此标签换行)</td></tr><tr><td align="left"><code>&lt;hr&gt;</code></td><td>定义水平线</td></tr><tr><td align="left"><code>&lt;font&gt;</code></td><td>文本字体，字体尺寸，字体颜色（已弃用）</td></tr></tbody></table></li></ul><h3 id="图片-音频-视频"><a href="#图片-音频-视频" class="headerlink" title="图片 音频 视频"></a>图片 音频 视频</h3><ul><li><code>&lt;img&gt;</code> 定义图片<ul><li>src规定显示图像的 URL (同一资源定位符)</li><li>height 定义图像高度</li><li>width 定义图像宽度</li></ul></li><li><code>&lt;audio&gt;</code> 定义音频，支持的音频格式：MP3、WAV、OGG  <ul><li><code>src</code> 规定音频的 URL</li><li><code>controls</code> 显示播放控件</li></ul></li><li><code>&lt;video&gt;</code> 定义视频，支持的视频格式：MP4、WebM、OGG<ul><li><code>src</code> 规定视频的 URL</li><li><code>controls</code> 显示播放控件</li></ul></li></ul><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p><code>&lt;a&gt;</code> 定义超链接，用于链接到另一个资源</p><ul><li>herf 指定打开文件的 URL</li><li>target 指定打开文件的方式<ul><li>_self : 默认值，在当前页面打开 </li><li>_blank : 在空白页面打开</li></ul></li></ul><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;ol&gt;</code></td><td>有序列表</td></tr><tr><td><code>&lt;ul&gt;</code></td><td>无序列表</td></tr><tr><td><code>&lt;li&gt;</code></td><td>列表项</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>牛奶<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>咖啡<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>茶<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>牛奶<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>咖啡<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>茶<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><ul><li><p><code>&lt;table&gt; </code> 定义表格</p><ul><li>border : 规定表格边框的宽度</li><li>width : 规定表格的宽度</li><li>cellspacing : 规定单元格之间的空白</li></ul></li><li><p><code>&lt;tr&gt;</code> 定义表格行</p><ul><li>align : 规定表格行的对齐方式</li></ul></li><li><p><code> &lt;td&gt;</code> 定义单元格</p><ul><li>rowspan : 规定单元格可跨越的行数</li><li>colspan : 规定单元格可跨越的列数</li></ul></li><li><p><code>&lt;th&gt;  </code> 定义表格头部</p></li></ul><h3 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h3><ul><li><code> &lt;div&gt;</code>  定义 HTML 文档中的一个区域部分，经常与 CSS 一起使用，用来布局网页</li><li><code>&lt;span&gt;</code> 用于组合行内元素</li></ul><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p>常见于登录注册等窗口</p><ul><li>表单：在网页中主要负责数据采集功能，使用<code>&lt;form&gt;</code> 标签定义表单</li><li>表单项（元素）：不同类型的 input 元素，下拉列表、文本域等</li></ul><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;form&gt;</code></td><td>定义表单</td></tr><tr><td><code>&lt;input&gt;</code></td><td>定义表单项，通过 type 属性控制输入形式</td></tr><tr><td><code>&lt;label&gt;</code></td><td>为表单项定义标注</td></tr><tr><td><code>&lt;select&gt;</code></td><td>定义下拉列表</td></tr><tr><td><code>&lt;option&gt;</code></td><td>定义下拉列表项</td></tr><tr><td><code>&lt;textarea&gt;</code></td><td>定义文本域</td></tr></tbody></table><ul><li><code>&lt;form&gt;</code> 定义表单<ul><li>action 属性：规定表单提交时向何处提交表单 URL</li><li>method 属性：规定表单提交的方式；get | post</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span> <br></code></pre></td></tr></table></figure><h4 id="type-类型"><a href="#type-类型" class="headerlink" title="type 类型"></a>type 类型</h4><table><thead><tr><th>type 取值</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>定义单行输入字段，默认值</td></tr><tr><td>password</td><td>定义密码输入，不回显示明文</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义文件上传按钮</td></tr><tr><td>hidden</td><td>定义隐藏字段，该字段对用户不显示但会随表单提交到服务器</td></tr><tr><td>submit</td><td>定义提交按钮，点击会将表单提交到服务器</td></tr><tr><td>reset</td><td>清空表单</td></tr><tr><td>button</td><td>定义可点击按钮</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    爱好：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hobby1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;hobby1&quot;</span> &gt;</span>旅游<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hobby2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;hobby2&quot;</span> &gt;</span>电影<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hobby3&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;hobby3&quot;</span> &gt;</span>游戏<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    头像:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span>城市<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span>个人描述: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">anme</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li>CSS 是一门语言，用于控制网页表现</li><li>CSS ( Cascading Style Sheet ) 层叠样式表</li></ul><h3 id="CSS-导入方式"><a href="#CSS-导入方式" class="headerlink" title="CSS 导入方式"></a>CSS 导入方式</h3><ol><li><p>内联样式： 通过 HTML 标签中的 style 属性控制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>Hello CSS<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>内部样式：定义<code>&lt;style&gt;</code>  标签，在标签内部定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>内部样式<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: aqua;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>外部样式：定义 <code>&lt;link&gt;</code> 标签,引入 CSS 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;demo.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*.css*/</span><br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">color</span>: rebeccapurple;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>优先级：内联样式 &gt; 内部样式 &gt; 外部样式</p><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;cls&quot;</span>&gt;</span>hello css<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>元素选择器：元素名称{color: red;}</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></td></tr></table></figure></li><li><p>id 选择器：#id 属性值{color: red;}</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#name</span>&#123;<span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></td></tr></table></figure></li><li><p>类选择器  .class属性值{ color: red;}</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.cls</span>&#123;<span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></td></tr></table></figure></li></ul><p>优先级： id 选择器 &gt; 类选择器 &gt; 元素选择器</p><h3 id="CSS属性"><a href="#CSS属性" class="headerlink" title="CSS属性"></a><a href="www.w3school.com.cn/cssref/index.asp">CSS属性</a></h3>]]></content>
    
    
    <categories>
      
      <category>java 后端</category>
      
      <category>java web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从输入网页到显示</title>
    <link href="/2023/03/08/%E4%BB%8E%E8%BE%93%E5%85%A5%E7%BD%91%E9%A1%B5%E5%88%B0%E6%98%BE%E7%A4%BA/"/>
    <url>/2023/03/08/%E4%BB%8E%E8%BE%93%E5%85%A5%E7%BD%91%E9%A1%B5%E5%88%B0%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="从输入网址到显示网页"><a href="#从输入网址到显示网页" class="headerlink" title="从输入网址到显示网页"></a>从输入网址到显示网页</h1><h2 id="URL-解析"><a href="#URL-解析" class="headerlink" title="URL 解析"></a>URL 解析</h2><p>输入网页首先进行的是 URL 解析 例如输入如下 URL ( URL 使用 <a href="https://www.ibm.com/docs/zh/db2/11.1?topic=support-unicode-character-encoding">unicode 编码</a>)</p><p><a href="https://mrzzzz1.github.io/2023/03/07/%E4%BD%BF%E7%94%A8maven%E7%AE%A1%E7%90%86java%E9%A1%B9%E7%9B%AE/index.html">https://mrzzzz1.github.io/2023/03/07/%E4%BD%BF%E7%94%A8maven%E7%AE%A1%E7%90%86java%E9%A1%B9%E7%9B%AE/index.html</a></p><p><img src="https://p.ipic.vip/wr6swm.png"></p><p>可知请求的是mrzzzz1.github.io 域名下的 &#x2F;2023&#x2F;03&#x2F;07&#x2F;使用maven管理java项目&#x2F;index.html 文件。</p><p>若域名后没有文件呢？如 mrzzzz1.github.io 或 URL 以 &#x2F; 结尾，例如<img src="https://p.ipic.vip/grdewg.png"> </p><p>这是在请求什么？</p><p>这是在请求根目录下设置的默认文件，也就是 &#x2F;index.html 或 &#x2F;default.html 文件，取决于服务器的设置。</p><h3 id="产生-HTTP-请求"><a href="#产生-HTTP-请求" class="headerlink" title="产生 HTTP 请求"></a>产生 HTTP 请求</h3><p>知道了用户想要什么，浏览器就会根据这些信息封装 HTTP 请求，请求有很多种，最常见的是 get 和 post</p><p><img src="https://p.ipic.vip/yzvckb.png"></p><p>将请求封装成 HTTP 数据包后，浏览器要将数据包交给操作系统，请它发送给 web 服务器，但在这之前，还需要获取服务器域名对应的 IP 地址</p><h2 id="DNS-域名解析"><a href="#DNS-域名解析" class="headerlink" title="DNS 域名解析"></a>DNS 域名解析</h2><p>域名解析即找到域名对应的 IP 地址</p><h3 id="域名的层级关系"><a href="#域名的层级关系" class="headerlink" title="域名的层级关系"></a>域名的层级关系</h3><p>在域名中，不同级别的域名之间以 <code>.</code> 分隔，越靠右级别越高，形成一颗树。</p><p>如上述域名  <code>mrzzzz1.github.io</code>  ，其实在 io 后省略了一个 <code>. </code> ，这个点是根域，.io 为顶级域，.github 为二级域，mrzzzz1 为三级域名。</p><p>首先客户端会查看缓存（浏览器缓存 –&gt; 操作系统DNS缓存 –&gt; hosts 文件）中是否有所需域名和 IP 对应的缓存，若没有，则向本地 DNS 服务器请求，若本地 DNS 服务器存有则直接放回，若没有，则由本地 DNS 服务器向根服务器询问，根服务器告知对应顶级域名服务器 IP 地址，本地服务器在向顶级域服务器询问，顶级域名服务器在告诉本地 DNS 服务器权威服务器地址，依次往下询问，采用只指路不带路的方式减少上层服务器负载。</p><h2 id="TCP段封装"><a href="#TCP段封装" class="headerlink" title="TCP段封装"></a>TCP段封装</h2><p>浏览器调用 Socket 函数，将要绑定的源 IP ，目标 IP , 源端口，目标端口传给操作系统，操作系统为数据包封装 tcp 头部，形成 tcp 段。</p><img src="https://p.ipic.vip/8okig8.png" style="zoom:80%;" /><p>由于 一个 TCP 段长度固定，数据包可能被分为多个段。</p><ul><li>MTU：一个网络包的最大长度，以太网中一般为 1500 字节。</li><li>MSS：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度。</li></ul><h3 id="TCP头内容"><a href="#TCP头内容" class="headerlink" title="TCP头内容"></a>TCP头内容</h3><ul><li>16位源端口号和16位目的端口号</li><li>32位序号：一次 TCP 通信过程中某一个传输方向上的字节流的每个字节的编号，通过这个来确认发送的数据有序，比如现在序列号为1000，发送了1000，下一个序列号就是2000。</li><li>32位确认号：用来响应 TCP 报文段，给收到的 TCP 报文段的序号加1，三握时还要携带自己的序号。</li><li>4位头部长度：标识该 TCP 头部有多少个4字节，共表示最长15*4&#x3D;60字节。同 IP 头部</li><li>6位保留。6位标志。URG（紧急指针是否有效）ACK（表示确认号是否有效）PSH（提示接收端应用程序应该立即从TCP接收缓冲区读走数据）RST（表示要求对方重新建立连接）SYN（表示请求建立一个连接）FIN（表示通知对方本端要关闭连接）</li><li>16位窗口大小：TCP 流量控制的一个手段，用来告诉对端 TCP 缓冲区还能容纳多少字节。</li><li>16位校验和：由发送端填充，接收端对报文段执行 CRC 算法以检验 TCP 报文段在传输中是否损坏。</li><li>16位紧急指针：一个正的偏移量，它和序号段的值相加表示最后一个紧急数据的下一字节的序号</li></ul><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>在将数据发送给服务端之前，需进行 tcp 三次握手</p><img src="https://p.ipic.vip/mlussk.png" style="zoom:80%;" /><ul><li><p>一开始，客户端和服务端都处于 CLOSE 状态，服务端开始监听某个端口，处于 LISTEN 状态</p></li><li><p>客户端主动发起连接 SYN（Synchronize Sequence Numbers，同步序列编号），并告知之后处于 SYN-SENT 状态。</p></li><li><p>服务端接收到 SYN 连接，返回 ACK（Acknowledge Character，确认字符），并且向客户端发起 SYN ，之后处于 SYN-RCVD 状态。</p></li><li><p>客户端收到服务端发送的 SYN 和 ACK 之后，发送对 SYN 确认的 ACK，之后处于 ESTABLISHED 状态。</p></li><li><p>服务端收到 ACK 的 ACK 之后，处于 ESTABLISHED 状态，因为它也一发一收了。</p><h3 id="三次握手的作用"><a href="#三次握手的作用" class="headerlink" title="三次握手的作用"></a>三次握手的作用</h3><ul><li>确定客户端和服务端双方都具有发送和接收数据的能力。</li><li>防止服务端收到客户端已失效的连接请求导致混乱。</li></ul></li></ul><h2 id="封装-IP-报文"><a href="#封装-IP-报文" class="headerlink" title="封装 IP 报文"></a>封装 IP 报文</h2><p><img src="https://p.ipic.vip/sr9vqp.png"></p><p>IP 模块为 tcp 段添加 IP 头部，生成 IP 报文。</p><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis 导入项目和使用</title>
    <link href="/2023/03/08/Mybatis%20%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/08/Mybatis%20%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-导入项目和使用"><a href="#Mybatis-导入项目和使用" class="headerlink" title="Mybatis 导入项目和使用"></a>Mybatis 导入项目和使用</h1><h2 id="什么是-Mybatis"><a href="#什么是-Mybatis" class="headerlink" title="什么是 Mybatis"></a>什么是 Mybatis</h2><ul><li><p>Mybatis 是一款优秀的持久层框架，用于简化 JDBC 开发, 它支持自定义 SQL、存储过程以及高级映射。</p></li><li><p>避免硬编码，方便维护  </p></li><li><p>官网 ： <a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><h2 id="导入-Mybatis"><a href="#导入-Mybatis" class="headerlink" title="导入 Mybatis"></a>导入 Mybatis</h2><p>使用 Maven 导入 Mybatis 包 （ 配置 <a href="https://mrzzzz1.github.io/2023/03/07/%E4%BD%BF%E7%94%A8maven%E7%AE%A1%E7%90%86java%E9%A1%B9%E7%9B%AE/">Maven </a>)</p><p>打开项目的 pom.xml 文件，添加依赖（自行选择版本），并刷新（ mysql 驱动等其他包请自行导入）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编写核心配置文件"><a href="#编写核心配置文件" class="headerlink" title="编写核心配置文件"></a>编写核心配置文件</h2><p>在项目 resources 目录下创建 mybatis-config.xml 文件</p><p><span id='1'></span></p><p><img src="https://p.ipic.vip/rnswyx.png"> </p><p>向文件中写入如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--数据库连接信息--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--加载sql映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据实际情况更改数据库连接信息和 sql 映射文件信息，<strong>需与下文配置 sql 映射文件对应</strong>，如 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--数据库连接信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--加载sql映射文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置-sql-映射文件"><a href="#配置-sql-映射文件" class="headerlink" title="配置 sql 映射文件"></a>配置 sql 映射文件</h2><p>创建 sql 映射文件 (UserMapper.xml) ，文件名自取  <a href="#1">如图</a> ，<strong>需与 mybatis-config.xml 中的 mapper resource 对应</strong></p><p>写入如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zjt.pojo.User&quot;</span>&gt;</span><br>        select * from tb_users;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>namespace 名字空间，自取</p></li><li><p>一个 select 元素对应一条 sql 语句</p></li><li><p>id 为该 sql 语句唯一标识，不可重复</p></li><li><p>resultType 放回类型，可以是基本类型，也可以是自定义类</p></li></ul><h2 id="编写查询代码"><a href="#编写查询代码" class="headerlink" title="编写查询代码"></a>编写查询代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-comment">//加载 mybatis 核心配置文件</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>      <span class="hljs-comment">//获取 SqlSessionFactory</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><span class="hljs-comment">//获取 sqlSession 对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>      <span class="hljs-comment">//查询</span><br>        List&lt;User&gt; users = sqlSession.selectList(<span class="hljs-string">&quot;test.selectAll&quot;</span>);<br>        System.out.println(users);<br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解决SQL映射文件警告"><a href="#解决SQL映射文件警告" class="headerlink" title="解决SQL映射文件警告"></a>解决SQL映射文件警告</h2><ul><li><p>产生原因： IDEA 和数据库没有建立连接，不能识别表信息。</p></li><li><p>解决方式：在IDEA 中配置 MySQL 数据库连接</p><p><img src="https://p.ipic.vip/xfv3na.png"></p></li></ul><p>​点击右侧 Database, 点击 <code>+</code>选择 Data Source 中的 MySQL , 按照提示输入用户名密码等连接数据库</p><p>即可在 IDEA 中像 Navicat 一样操作数据库。</p><p>在 file –&gt; settings 搜索 sql dialet 选择 mysql 即可使用代码补全</p><h2 id="Mapper-代理开发"><a href="#Mapper-代理开发" class="headerlink" title="Mapper 代理开发"></a>Mapper 代理开发</h2><ol><li><p>定义与 SQL 映射文件同名的 Mapper 接口，并将 Mapper 接口和 SQL 映射文件放置在同一目录下</p><p>在 resources 下创建与 Mapper 所在包名相同的 Directory ,注意使用 <code>/</code> 代替1包名中的 <code>.</code>。</p><p><img src="https://p.ipic.vip/zmv444.png" alt="image-20230308221810618"></p><p><img src="https://p.ipic.vip/68coj7.png"></p></li><li><p>设置 SQL 映射文件中的 namespace 为 Mapper 接口全限定名</p><p><img src="https://p.ipic.vip/m1d7ai.png"></p></li><li><p>在 Mapper 接口中定义方法，方法名就是 SQL 映射文件中 sql 语句的 id ，并保持参数和返回值类型一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br>    User <span class="hljs-title function_">selectById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zjt.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zjt.pojo.User&quot;</span>&gt;</span><br>        select * from tb_users;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zjt.pojo.User&quot;</span>&gt;</span><br>        select * from tb_users where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用 <code>#&#123;&#125;</code> 传参 ，<code>$&#123;&#125;</code> 也可传参，但不能防止 sql 注入</p></li><li><p>编码</p><ul><li>通过 SqlSession 的 getMapper 方法获取 Mapper 接口代理对象</li><li>通过调用方法完成 sql 执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br><span class="hljs-comment">//        List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);</span><br><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; users = mapper.selectAll();<br>        System.out.println(users);<br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>若 Mapper 接口名称和 SQL 映射文件名称相同，并在同一目录下，则可以使用包扫描的方式简化 SQL 映射文件的加载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis-config.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/zjt/mapper/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 替换为--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zjt.mapper&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Mybatis-核心文件配置"><a href="#Mybatis-核心文件配置" class="headerlink" title="Mybatis 核心文件配置"></a>Mybatis 核心文件配置</h2><h3 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--数据库连接信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zjt031015&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--数据库连接信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zjt031015&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可配置多个数据库环境，如开发，测试，发布等，通过更改 default 选择不同环境</p><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zjt.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>包扫描后使用包中的类不用加包名</p><p><strong>注意配置文件的顺序</strong></p><h2 id="MybatisX插件"><a href="#MybatisX插件" class="headerlink" title="MybatisX插件"></a>MybatisX插件</h2><ul><li><p>XML 和接口方法相互跳转</p></li><li><p>根据接口方法生成 statement</p><p>在 IDEA 中安装即可</p></li></ul><h2 id="名称不一致问题"><a href="#名称不一致问题" class="headerlink" title="名称不一致问题"></a>名称不一致问题</h2><p>当数据库表中的字段名称和实体类的属性名称不一致时，不能自动封装数据</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p>对数据库表子段名起别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zjt.pojo.Brand&quot;</span>&gt;</span><br>        select id, brand_name brand, company_name companyName, ordered, description, status from tb_brand;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用 sql 片段</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;brand_column&quot;</span>&gt;</span><br>  id, brand_name brand, company_name companyName, ordered, description, status<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zjt.pojo.Brand&quot;</span>&gt;</span><br>  select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;brand_column&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> from tb_brand;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>使用 resultMap（推荐）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.zjt.pojo.Brand&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;brand_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;brandName&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;company_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;companyName&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>  select * from tb_brand;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​添加 resultMap , 将 select 中的 resultType 改为 resultMap,使用 id 完成主键字段映射， result 完成其他字段映射。</p></li></ol><h2 id="特殊字符处理"><a href="#特殊字符处理" class="headerlink" title="特殊字符处理"></a>特殊字符处理</h2><p>Xml 文件不能使用 <code>&lt;</code>等符号</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>转义字符</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">select * from tb_brand where id &amp;lt #&#123;id&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>CDATA 区</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zjt.pojo.Brand&quot;</span>&gt;</span><br>  select * from tb_brand where id<br>  &lt;![CDATA[<br>        &lt;<br>        ]]&gt;<br>  #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="多参数传递"><a href="#多参数传递" class="headerlink" title="多参数传递"></a>多参数传递</h2><p>假设 查询语句为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zjt.pojo.Brand&quot;</span>&gt;</span><br>  select * <br>  from tb_brand <br>  where status = #&#123;status&#125;<br>  and company_name like #&#123;companyName&#125;<br>  and brand_name like #&#123;brandName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p>使用@Pama 注解散装参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Brand&gt; <span class="hljs-title function_">selectByCondition</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;status&quot;)</span> <span class="hljs-type">int</span> status,</span><br><span class="hljs-params">                              <span class="hljs-meta">@Param(&quot;companyName&quot;)</span> String companyName,</span><br><span class="hljs-params">                              <span class="hljs-meta">@Param(&quot;brandName&quot;)</span> String brandName)</span>;<br></code></pre></td></tr></table></figure></li><li><p>对象参数，对象属性名称与参数占位符名称一致，调用相应 <code>get</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Brand&gt; <span class="hljs-title function_">selectByCondition</span><span class="hljs-params">(Brand brand)</span>;<br></code></pre></td></tr></table></figure></li><li><p>Map 参数，需 map 中的 key 与参数占位符名称一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Brand&gt; <span class="hljs-title function_">selectByCondition</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h2><h3 id="多条件动态条件查询"><a href="#多条件动态条件查询" class="headerlink" title="多条件动态条件查询"></a>多条件动态条件查询</h3><p>用于有多个条件限制，某些条件可能没有输入</p><ul><li><p>使用 if </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByCondition&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>  select *<br>  from tb_brand<br>  where <br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>    status = #&#123;status&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span><br>    and company_name like #&#123;companyName&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span><br>    and brand_name like #&#123;brandName&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当某些条件不存在时，可能会因为 <code>and</code> 不符合 sql 语句格式报错</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4></li><li><p>在最前面加 1&#x3D;1，每个条件前加sql</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByCondition&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>  select *<br>  from tb_brand<br>  where 1=1<br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>    and status = #&#123;status&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span><br>    and company_name like #&#123;companyName&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span><br>    and brand_name like #&#123;brandName&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用 <code>&lt;while&gt;</code> 替换 <code>while</code> 关键字</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByCondition&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>  select *<br>  from tb_brand<br>  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>      status = #&#123;status&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    and<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span><br>      company_name like #&#123;companyName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    and<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span><br>      brand_name like #&#123;brandName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="单条件动态条件查询"><a href="#单条件动态条件查询" class="headerlink" title="单条件动态条件查询"></a>单条件动态条件查询</h3><p>从多个条件中选择一个条件生效</p><p>使用 <code>&lt;choose&gt; &lt;when&gt; &lt;otherwise&gt;</code>  标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByConditionSingle&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>  select *<br>  from tb_brand<br>  where<br>  <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><span class="hljs-comment">&lt;!--相当于switch--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--相当于case--&gt;</span><br>      status = #&#123;status&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span><br>      company_name like #&#123;companyName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span><br>      brand_name like #&#123;brandName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当用户没有输入时 sql 语法报错</p><h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li><p>在最后加上 <code>&lt;otherwise&gt;1=1&lt;/otherwise&gt;</code> 搜索全部。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByConditionSingle&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>  select *<br>  from tb_brand<br>  where<br>  <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><span class="hljs-comment">&lt;!--相当于switch--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--相当于case--&gt;</span><br>      status = #&#123;status&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span><br>      company_name like #&#123;companyName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span><br>      brand_name like #&#123;brandName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>      1=1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用 <code>&lt;where&gt;</code> 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByConditionSingle&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>  select *<br>  from tb_brand<br>  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><span class="hljs-comment">&lt;!--相当于switch--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--相当于case--&gt;</span><br>        status = #&#123;status&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span><br>        company_name like #&#123;companyName&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span><br>        brand_name like #&#123;brandName&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><ul><li><p>定义 add 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Brand brand)</span>;<br></code></pre></td></tr></table></figure></li><li><p>添加 sql 映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><br>  insert into tb_brand (brand_name, company_name, ordered, description, status)<br>  values(#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>调用接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BrandMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);<br>mapper.add(brand);<br>sqlSession.commit();<br></code></pre></td></tr></table></figure><p>注意：sqlSession 默认开启事务，添加后需要提交事物。</p><p>也可在获取 sqlSession 时关闭事务，即设置 autocommit 为 true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="主键返回"><a href="#主键返回" class="headerlink" title="主键返回"></a>主键返回</h3><p>在 insert 标签中 设置 <code>useGeneratedKeys=&quot;true&quot;</code> ，keyProperty&#x3D;”主键在类中的名称”，即可将主键返回到传入的示例对象中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>例如如下语句，即可打印出返回的 id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mapper.add(brand);<br>System.out.println(brand.getId());<br></code></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="修改全部字段"><a href="#修改全部字段" class="headerlink" title="修改全部字段"></a>修改全部字段</h3><ul><li><p>定义 update 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> brand 修改后的 brand 对象</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> 修改的行数</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Brand brand)</span>;<br></code></pre></td></tr></table></figure></li><li><p>添加 sql 映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>    update tb_brand<br>    set<br>        brand_name = #&#123;brandName&#125;,<br>        company_name = #&#123;companyName&#125;,<br>        ordered = #&#123;ordered&#125;,<br>        description = #&#123;description&#125;<br>    where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>调用接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mapper.update(brand);<br></code></pre></td></tr></table></figure></li></ul><h3 id="动态修改字段"><a href="#动态修改字段" class="headerlink" title="动态修改字段"></a>动态修改字段</h3><ul><li><p>使用 <code>&lt;if&gt;</code> 标签，与<a href="#%E5%A4%9A%E6%9D%A1%E4%BB%B6%E5%8A%A8%E6%80%81%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2">多条件动态条件查询</a>类似，不再赘述。</p></li><li><p>同时用 <code>&lt;set&gt;</code>  标签代替 <code>set</code> 关键字，避免 sql 语法错误</p></li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="根据-id-删除"><a href="#根据-id-删除" class="headerlink" title="根据 id 删除"></a>根据 id 删除</h3><ul><li><p>定义 deleteById 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIdAfter</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure></li><li><p>添加 sql 映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteById&quot;</span>&gt;</span><br>    delete from tb_brand where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>调用接口方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">mapper.deleteById(7);<br></code></pre></td></tr></table></figure></li></ul><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><ul><li><p>定义 deleteByIds 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIds</span><span class="hljs-params">(<span class="hljs-type">int</span> [] ids)</span>;<br></code></pre></td></tr></table></figure></li><li><p>添加 sql 映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span>&gt;</span><br>  delete from tb_brand where id<br>  in (<br>  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;array&quot;</span> <span class="hljs-attr">item</span> = <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>    #&#123;id&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>  );<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用 <code>separator</code> 添加分隔符。</p><p>mybatis会将数组参数封装为 Map 集合， 默认：key 为 array ，value 为数组，可使用 param注解替换。如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> <span class="hljs-type">int</span> [] id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span>&gt;</span><br>  delete from tb_brand where id<br>  in (<br>  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span> = <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>    #&#123;id&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>  );<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还可使用 <code>foreach</code> 标签的 <code>open</code> ， <code>close</code> 替代括号，美化代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span>&gt;</span><br>  delete from tb_brand where id<br>  in <br>  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;array&quot;</span> <span class="hljs-attr">item</span> = <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>    #&#123;id&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>  ;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="MyBatis-传参原理"><a href="#MyBatis-传参原理" class="headerlink" title="MyBatis 传参原理"></a>MyBatis 传参原理</h2><h3 id="参数封装"><a href="#参数封装" class="headerlink" title="参数封装"></a>参数封装</h3><h4 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h4><ul><li><p>POJO 类型：直接使用，属性名和参数占位符名称一致</p></li><li><p>Map 集合：直接使用，键名和参数占位符名称一致</p></li><li><p>Collection：封装成 Map 集合 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Map.put(<span class="hljs-string">&quot;arg0&quot;</span>,collection);<br>Map.put(<span class="hljs-string">&quot;collection&quot;</span>,collection);<br></code></pre></td></tr></table></figure></li><li><p>List</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Map.put(<span class="hljs-string">&quot;arg0&quot;</span>,list);<br>Map.put(<span class="hljs-string">&quot;collection&quot;</span>,list);<br>map.put(<span class="hljs-string">&quot;list&quot;</span>,list)<br></code></pre></td></tr></table></figure></li><li><p>Array</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">Map</span>.put(<span class="hljs-string">&quot;arg0&quot;</span>,<span class="hljs-built_in">array</span>);<br><span class="hljs-built_in">Map</span>.put(<span class="hljs-string">&quot;array&quot;</span>,<span class="hljs-built_in">array</span>);<br></code></pre></td></tr></table></figure></li><li><p>其他：直接使用</p></li></ul><h3 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h3><p>Mybatis 使用 <code>ParamNameResolver</code>  类将多个参数封装为 <code>Map&lt;Object&gt;</code> 集合 ,参数1 默认 key 为 arg0 和param1，其他参数类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">map.put(<span class="hljs-string">&quot;arg0&quot;</span>,参数<span class="hljs-number">1</span>);<br>map.put(<span class="hljs-string">&quot;param1&quot;</span>,参数<span class="hljs-number">1</span>);<br>map.put(<span class="hljs-string">&quot;arg1&quot;</span>,参数<span class="hljs-number">2</span>);<br>map.put(<span class="hljs-string">&quot;param2&quot;</span>,参数<span class="hljs-number">2</span>);<br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><p>使用 param 注解可替换默认键名（此时不能再使用默认键名，智能使用注解名称）</p><h3 id="ParamNameResolver-源码"><a href="#ParamNameResolver-源码" class="headerlink" title="ParamNameResolver 源码"></a>ParamNameResolver 源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getNamedParams</span><span class="hljs-params">(Object[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">paramCount</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.names.size();<br>    <span class="hljs-keyword">if</span> (args != <span class="hljs-literal">null</span> &amp;&amp; paramCount != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.hasParamAnnotation &amp;&amp; paramCount == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> args[(Integer)<span class="hljs-built_in">this</span>.names.firstKey()];<br>            <span class="hljs-keyword">return</span> wrapToMapIfCollection(value, <span class="hljs-built_in">this</span>.useActualParamName ? (String)<span class="hljs-built_in">this</span>.names.get(<span class="hljs-number">0</span>) : <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Map&lt;String, Object&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperMethod</span>.ParamMap();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">Iterator</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.names.entrySet().iterator(); var5.hasNext(); ++i) &#123;<br>                Map.Entry&lt;Integer, String&gt; entry = (Map.Entry)var5.next();<br>                param.put(entry.getValue(), args[(Integer)entry.getKey()]);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">genericParamName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;param&quot;</span> + (i + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.names.containsValue(genericParamName)) &#123;<br>                    param.put(genericParamName, args[(Integer)entry.getKey()]);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> param;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">wrapToMapIfCollection</span><span class="hljs-params">(Object object, String actualParamName)</span> &#123;<br>    MapperMethod.ParamMap map;<br>    <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> Collection) &#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperMethod</span>.ParamMap();<br>        map.put(<span class="hljs-string">&quot;collection&quot;</span>, object);<br>        <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> List) &#123;<br>            map.put(<span class="hljs-string">&quot;list&quot;</span>, object);<br>        &#125;<br><br>        Optional.ofNullable(actualParamName).ifPresent((name) -&gt; &#123;<br>            map.put(name, object);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (object != <span class="hljs-literal">null</span> &amp;&amp; object.getClass().isArray()) &#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperMethod</span>.ParamMap();<br>        map.put(<span class="hljs-string">&quot;array&quot;</span>, object);<br>        Optional.ofNullable(actualParamName).ifPresent((name) -&gt; &#123;<br>            map.put(name, object);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p>使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java 注解不仅力不从心，还会让本就复杂的 SQL 语句更加混乱不堪。 因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from tb_users where id =#&#123;id&#125;&quot;)</span><br>User <span class="hljs-title function_">selectById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><p>insert update delete 注解类似</p>]]></content>
    
    
    <categories>
      
      <category>java 后端</category>
      
      <category>java web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
      <tag>java</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Maven 管理 java 项目</title>
    <link href="/2023/03/07/%E4%BD%BF%E7%94%A8maven%E7%AE%A1%E7%90%86java%E9%A1%B9%E7%9B%AE/"/>
    <url>/2023/03/07/%E4%BD%BF%E7%94%A8maven%E7%AE%A1%E7%90%86java%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-Maven-管理-java-项目"><a href="#使用-Maven-管理-java-项目" class="headerlink" title="使用 Maven 管理 java 项目"></a>使用 Maven 管理 java 项目</h1><h2 id="什么是-Maven"><a href="#什么是-Maven" class="headerlink" title="什么是 Maven"></a>什么是 Maven</h2><p><a href="https://maven.apache.org/">Maven </a> 是专门用于管理和构建 Java 项目的工具，它的主要功能有：</p><ul><li><p>提供一套标准化的项目结构</p></li><li><p>提供一套标准化的构建流程（编译，测试，打包，发布）</p></li><li><p>提供一套依赖管理机制</p><p>若只需在 IDEA 中使用 Maven 可直接跳到<a href="#IntelliJ-IDEA-%E4%BD%BF%E7%94%A8-Maven">后面</a></p></li></ul><h2 id="安装和配置-Maven"><a href="#安装和配置-Maven" class="headerlink" title="安装和配置 Maven"></a>安装和配置 Maven</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用 homebrew 安装，打开终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install maven<br></code></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn -version<br></code></pre></td></tr></table></figure><p>若出现如下输出则安装成功， 安装目录及为 Maven home 所示目录,请记录其位置，后续需要使用</p><p><img src="https://p.ipic.vip/50k7jk.png"></p><p>若显示未找到 JAVA_HOME (若未下载 JDK 请自行搜索下载)</p><p>在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/libexec/java_home<br></code></pre></td></tr></table></figure><p>输出目录即为 java_home 目录</p><p>打开终端配置文件(若为 zsh 则使用命令 <code>vim .zshrc</code> ,若为 bash 则使用命令 <code>vim .bash_profile</code> ),在最后添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA_HOME=/Users/zjt/Library/Java/JavaVirtualMachines/openjdk-19.0.1/Contents/Home<br></code></pre></td></tr></table></figure><p>重启终端后在输入<code>mvn -version</code> 即可正确输出。</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h4><p>本地仓库用于存储下载的依赖 jar 包</p><p>选择你喜欢的位置创建名为 mvn_resp 的文件夹（也可自行命名，下文mvn_resp替换为你的命名）</p><p>打开上述 maven Home 目录下的 conf 目录</p><p>打开目录下的 <code>settings.xml </code>文件，找到如下位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- localRepository</span><br><span class="hljs-comment">   | The path to the local repository maven will use to store artifacts.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="hljs-comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-comment">&lt;!-- interactiveMode   | This will determine whether maven prompts you when it needs input. If set to false,</span><br><span class="hljs-comment">   | maven will use a sensible default value, perhaps based on some other setting, for</span><br><span class="hljs-comment">   | the parameter in question.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">   | Default: true</span><br><span class="hljs-comment">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span><br><span class="hljs-comment">  --&gt;</span><br><br></code></pre></td></tr></table></figure><p>将 <code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code> 复制到 <code>--&gt;</code>下一行，并将 <code>/path/to/local/repo</code> 改为你选择的仓库地址，类似如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- localRepository</span><br><span class="hljs-comment">   | The path to the local repository maven will use to store artifacts.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="hljs-comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="hljs-comment">  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>/opt/homebrew/Cellar/maven/3.9.0/mvn_resp<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- interactiveMode   | This will determine whether maven prompts you when it needs input. If set to false,</span><br><span class="hljs-comment">   | maven will use a sensible default value, perhaps based on some other setting, for</span><br><span class="hljs-comment">   | the parameter in question.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">   | Default: true</span><br><span class="hljs-comment">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span><br><span class="hljs-comment">  --&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="配置阿里云私服"><a href="#配置阿里云私服" class="headerlink" title="配置阿里云私服"></a>配置阿里云私服</h3><p>由于 Maven 默认仓库在国外，配置阿里云私服可提高下载速度</p><p>使用阿里云私服</p><p>在上述 settings.xml 文件中找到如下位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- mirror</span><br><span class="hljs-comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="hljs-comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span><br><span class="hljs-comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="hljs-comment">     |</span><br><span class="hljs-comment">    &lt;mirror&gt;</span><br><span class="hljs-comment">      &lt;id&gt;mirrorId&lt;/id&gt;</span><br><span class="hljs-comment">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span><br><span class="hljs-comment">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class="hljs-comment">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span><br><span class="hljs-comment">    &lt;/mirror&gt;</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-default-http-blocker<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>external:http:*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://0.0.0.0/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">blocked</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">blocked</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<mirrors>下添加如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>阿里云私服配置完毕！</p><h2 id="Maven-使用"><a href="#Maven-使用" class="headerlink" title="Maven 使用"></a>Maven 使用</h2><h3 id="Maven-项目树目录"><a href="#Maven-项目树目录" class="headerlink" title="Maven 项目树目录"></a>Maven 项目树目录</h3><p><img src="https://p.ipic.vip/rikt0a.png"></p><h3 id="Maven命令行基本使用"><a href="#Maven命令行基本使用" class="headerlink" title="Maven命令行基本使用"></a>Maven命令行基本使用</h3><p>注意：以下命令需在 pom.xml 对应目录下使用</p><ul><li><p>compile: 编译</p><p>用于编译 java 项目生成 .class 文件</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> compile<br></code></pre></td></tr></table></figure><p>编译后可在生成的 target 目录下找到对应文件</p></li><li><p>clean: 清理</p><p>用于删除编译生成的文件</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> clean<br></code></pre></td></tr></table></figure></li><li><p>test: 测试</p><p>用于测试项目，执行 test 目录下的代码</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> test<br></code></pre></td></tr></table></figure></li><li><p>package: 打包</p><p>用于打包生成.jar文件（在 target 目录下）</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">mvn <span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure></li><li><p>install 安装</p><p>用于将当前项目安装到本地仓库</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> install<br></code></pre></td></tr></table></figure></li></ul><h3 id="Maven-生命周期"><a href="#Maven-生命周期" class="headerlink" title="Maven 生命周期"></a>Maven 生命周期</h3><ul><li>Pre-clean —&gt; clean —&gt; post-claen</li><li>Compile —&gt; test —&gt; package —&gt; install</li><li>Pre-site —&gt; site —&gt; post-site</li></ul><p>同一生命周期内，执行后面的命令，前面的命令会自动执行</p><h3 id="IntelliJ-IDEA-使用-Maven"><a href="#IntelliJ-IDEA-使用-Maven" class="headerlink" title="IntelliJ IDEA 使用 Maven"></a>IntelliJ IDEA 使用 Maven</h3><p>IDEA自带 Maven  <del>(经典白学</del></p><p>点击 Intelij IDEA –&gt; Preferences 搜索 Maven 看到如下界面 </p><p><img src="https://p.ipic.vip/4l2r0o.png"></p><p>可将<code>Maven home path</code> ,<code>User settings file</code>, <code>Local repository</code> 换成之前设置的目录</p><h4 id="创建-Maven-项目"><a href="#创建-Maven-项目" class="headerlink" title="创建 Maven 项目"></a>创建 Maven 项目</h4><p><img src="https://p.ipic.vip/3puoj6.png"></p><p>Build system 选择 Maven 即可</p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>打开 pom.xml 文件，在  <code>&lt;/project&gt;</code> 前 添加类似如下语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点击右上角 Maven 刷新按钮即可将依赖添加到项目</p><p>依赖优先从本地仓库中搜索，若未找到从私服下载，若没有从中央仓库下载。</p><h4 id="导入-Maven-项目"><a href="#导入-Maven-项目" class="headerlink" title="导入 Maven 项目"></a>导入 Maven 项目</h4><p>点击IDEA 右侧 Maven 栏，点击 <code>+</code>找到需要导入的 Maven 项目的 pom.xml 文件，点击 open 即可导入该项目。</p>]]></content>
    
    
    <categories>
      
      <category>java 后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>Maven</tag>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 hexo 搭建 Github 博客</title>
    <link href="/2023/03/07/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/03/07/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-搭建-Github-博客"><a href="#hexo-搭建-Github-博客" class="headerlink" title="hexo 搭建 Github 博客"></a>hexo 搭建 Github 博客</h1><h2 id="环境准备-已有请忽略"><a href="#环境准备-已有请忽略" class="headerlink" title="环境准备(已有请忽略)"></a>环境准备(已有请忽略)</h2><h3 id="安装-homebrew"><a href="#安装-homebrew" class="headerlink" title="安装 homebrew"></a>安装 homebrew</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/ruby -e <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install)</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install git<br></code></pre></td></tr></table></figure><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install node<br></code></pre></td></tr></table></figure><h3 id="测试所需组件是否安装成功"><a href="#测试所需组件是否安装成功" class="headerlink" title="测试所需组件是否安装成功"></a>测试所需组件是否安装成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm -v<br>node -v<br>git --version<br></code></pre></td></tr></table></figure><p>若有类似如下显示则安装成功</p><p><img src="https://p.ipic.vip/c9tzou.png"></p><h2 id="配置-hexo"><a href="#配置-hexo" class="headerlink" title="配置 hexo"></a>配置 hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>创建博客文件夹并初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br><span class="hljs-built_in">mkdir</span> blog <span class="hljs-comment"># 将blog改为你喜欢的名字，下文blog均用该名字替代</span><br><span class="hljs-built_in">cd</span> blog<br>hexo init<br></code></pre></td></tr></table></figure><p>看到如下输出则成功</p><p><img src="https://p.ipic.vip/gwjsmo.png" alt="输出"></p><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>看到如下输出则博客搭建成功， 打开浏览器，输入 <a href="http://localhost:4000/">http://localhost:4000/</a>  可访问本地博客</p><p><img src="https://p.ipic.vip/ogdnkp.png"></p><h2 id="将博客部署到-Github"><a href="#将博客部署到-Github" class="headerlink" title="将博客部署到 Github"></a>将博客部署到 <a href="https://github.com/">Github</a></h2><p>在 Github 上新建一个仓库，Repository Name 填 <code>你的用户名.github.io </code>，仓库状态设为 Public，然后Create Repository 创建新的网站仓库。</p><p>打开终端执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog <br>npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>在 Finder (访达)中打开 blog 文件夹，打开其中的 _config.yml 文件，修改 deploy 部分为</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repo:</span> git@github.com:你的用户名/你的用户名.github.io.git<br><span class="hljs-symbol">branch:</span> main<br></code></pre></td></tr></table></figure><p>修改完成后按 Command + S 保存,打开终端，输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>第一次执行时需输入用户名和密码，注意2021年后 GitHub 需使用 token 登录，配置 token 很简单，请自行搜索，配置好后将 token 粘贴到密码处即可成功。</p><p>在浏览器地址栏输入 <code>你的名字.github.io</code> 即可访问你的博客，注意 GitHub 上传有一定延迟，可能需要等待一两分钟。</p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><h3 id="按照自己的需要下载适合的主题，可以查看官网"><a href="#按照自己的需要下载适合的主题，可以查看官网" class="headerlink" title="按照自己的需要下载适合的主题，可以查看官网"></a>按照自己的需要下载适合的主题，可以查看<a href="https://hexo.io/themes/">官网</a></h3><p>点击所选主题下蓝色字体进入 github ,复制其地址</p><p>在项目根目录下，即 blog 文件夹下执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">// <span class="hljs-built_in">clone</span>主题代码到 themes/butterfly<br>git <span class="hljs-built_in">clone</span> https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly <span class="hljs-comment">#将butterfly 改为你选择的主题</span><br></code></pre></td></tr></table></figure><h3 id="修改项目配置文件，配置主题"><a href="#修改项目配置文件，配置主题" class="headerlink" title="修改项目配置文件，配置主题"></a>修改项目配置文件，配置主题</h3><p>打开 blog 文件夹下的 _config.yml 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#修改配置文件</span><br>vim _config.yml <br></code></pre></td></tr></table></figure><p>找到 <code>theme: landspace</code> 字段，将 landspace 改为你下载的主题并保存</p><h3 id="在主目录下执行以下命令"><a href="#在主目录下执行以下命令" class="headerlink" title="在主目录下执行以下命令"></a>在主目录下执行以下命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive<br></code></pre></td></tr></table></figure><h3 id="重新生成项目"><a href="#重新生成项目" class="headerlink" title="重新生成项目"></a>重新生成项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo s <br></code></pre></td></tr></table></figure><p>在 <a href="http://localhost:4000/">http://localhost:4000/</a> 可看到新的主题</p><h3 id="配置到云端"><a href="#配置到云端" class="headerlink" title="配置到云端"></a>配置到云端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><h2 id="常用-hexo-命令"><a href="#常用-hexo-命令" class="headerlink" title="常用 hexo 命令"></a>常用 hexo 命令</h2><h3 id="hexo-init"><a href="#hexo-init" class="headerlink" title="hexo init"></a>hexo init</h3><p>用于初始化本地文件夹为网站的根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init [folder]<br></code></pre></td></tr></table></figure><h3 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h3><p>用于新建文章，一般可以简写为 <code>hexo n</code></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><ul><li><code>layout</code> 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</li><li><code>title</code> 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</li><li>生成的 md 文件位于 .&#x2F;source&#x2F;_posts 目录下</li></ul><h3 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a>hexo generate</h3><p>用于生成静态文件，一般可以简写为 <code>hexo g</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><ul><li><code>-d</code> 选项，指定生成后部署，与 <code>hexo d -g</code> 等价</li></ul><h3 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a>hexo server</h3><p>用于启动本地服务器，一般可以简写为 <code>hexo s</code></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><ul><li><code>-p</code> 选项，指定服务器端口，默认为 4000</li><li><code>-i</code> 选项，指定服务器 IP 地址，默认为 0.0.0.0</li><li><code>-s</code> 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li></ul><h3 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h3><p>用于部署网站，一般可以简写为 <code>hexo d</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo deploy</span><br></code></pre></td></tr></table></figure><ul><li><code>-g</code> 选项，指定生成后部署，与 <code>hexo g -d</code> 等价</li></ul><h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h3><p>用于清理缓存文件，是一个比较常用的命令 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>macOS</tag>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
